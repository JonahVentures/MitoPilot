[{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"how-to-use-mitopilot-on-the-smithsonian-hydra-computing-cluster","dir":"Articles","previous_headings":"","what":"How to use MitoPilot on the Smithsonian Hydra computing cluster","title":"NMNH Hydra","text":"need account access Hyrda computing cluster. Instructions available . Dan MacGuigan submitted request Hydra team system-wide Nextflow module. now, need install Nextflow Hydra. Also, reason, Nextflow work Java modules Hydra, also need install Java via SDKMAN. now executable nextflow file home directory. move location PATH. example: allows call nextflow anywhere cluster. Now ’re ready start using MitoPilot Hydra! login Hydra start interactive session running qrsh run conda deactivate avoid package conflicts (may necessary users) run module load tools/R/RStudio/server run start-rstudio-server (may asked run different command first time) leave cluster terminal window open exact command printed start-rstudio-server cluster terminal window leave local terminal window open open web browser enter http://localhost:8787 URL bar enter cluster login credentials access RStudio server commands run new window execute cluster interactive session install MitoPilot, use RStudio server window run following check installation successful loading library library(MitoPilot) can now follow instructions MitoPilot GitHub page run test dataset","code":"# Nextflow installation instructions # from https://www.nextflow.io/docs/latest/install.html cd ~ curl -s https://get.sdkman.io | bash # install SDKMAN source ~/.bashrc sdk install java 17.0.10-tem # install java curl -s https://get.nextflow.io | bash # install Nextflow chmod +x nextflow # make Nextflow executable mkdir ~/bin mv ~/nextflow ~/bin/nextflow if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"JonahVentures/MitoPilot\")"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"how-to-use-mitopilot-on-the-noaa-nmfs-senda-computing-cluster","dir":"Articles","previous_headings":"","what":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","title":"NOAA SEDNA","text":"need account access SEDNA computing cluster. Detailed instructionca can found . contact Krista Nichols (krista.nichols@noaa.gov) information. First, need create Mamba environment two MitoPilot dependencies, Nextflow Singularity. can now call nextflow singularity anywhere cluster, long mamba environment activated. first time, also need run following commands set RStudio server. Now ’re ready start using MitoPilot SENDA! Login NOAA NMFS VPN Login SEDNA Start interactive session running srun -c 2 --mem=12GB -p standard --pty /bin/bash Run mamba activate MitoPilot_deps Assign port RStudio running PORT=$(shuf -8000-9000 -n 1);echo \"Connect $PORT\" Launch RStudio. Note version 4.2 specified . changed version installed, change . Leave cluster terminal window open Note port matches $PORT assigned likely 8001 Also, must use node name logged instead “node30” Leave terminal window open Open web browser enter http://localhost:8787 URL bar commands run new window execute cluster interactive session Run remotes::install_github(\"JonahVentures/MitoPilot\", auth_token = gh_token) (work now b/c repo private) Check installation successful loading library library(MitoPilot) can now follow instructions MitoPilot GitHub page run test dataset","code":"mamba create --name MitoPilot_deps bioconda::nextflow conda-forge::singularity -y mamba activate MitoPilot_deps # Make a directory to host R-studio.  mkdir -p ~/rstudio cd ~/rstudio  # Start an interactive session srun -c 2 --mem=4GB -p standard --pty /bin/bash  # Pull R studio from singularity. Note, you can change the version mamba activate singularity-3.8.6 singularity pull docker://rocker/rstudio:4.2  mkdir -p run var-lib-rstudio-server printf 'provider=sqlite\\ndirectory=/var/lib/rstudio-server\\n' > database.conf singularity exec \\   --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf \\   ${HOME}/rstudio/rstudio_4.2.sif \\   rserver --www-address=0.0.0.0 --www-port=${PORT} --server-user=${USER}"},{"path":[]},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"installation","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Installation","title":"Test Project Tutorial","text":"running MitoPilot samples, recommend trying included test project, consisting Illumina data 12 fish species. following tutorial provides step--step walthrough. First, make sure R (>=4.0.0) Nextflow installed. tutorial also assumes using RStudio interface R. ’re working computing cluster, recommend checking RStudio Server. provided detailed instructions using RStuio Server Smithsonian Hydra NOAA SEDNA computing clusters. Next ’ll need install MitoPilot R package GitHub. Within RStudio, run following.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } BiocManager::install(\"JonahVentures/MitoPilot\")"},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"project-initialization","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Project Initialization","title":"Test Project Tutorial","text":"Now can initialize test project. data, use function MitoPilot::new_project. However, test data, ’ll use MitoPilot::new_test_project. Note:using execution environment currently supported, use config = config.MyEnv pass custom Nextflow config new_test_project function. FEATURE CURRENTLY DEVELOPMENT. test project successfully initialized, see following.","code":"# load the package library(MitoPilot)  # specify the directory where your test project will be created wd = \"/pool/public/genomics/macguigand/MitoPilot/testing/2024_12_13\"  # specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\" ex = \"NMNH_Hydra\"  # initialize the test project MitoPilot::new_test_project(     path = wd,      executor = ex,      container = \"drleopold/mitopilot\",     full_size = FALSE,     Rproj = FALSE ) SRR22396794 - Psychrolutes paradoxus   SRR22396940 - Psenes pellucidus SRR22396740 - Hoplostethus occidentalis SRR21844202 - Fundulus majalis SRR22396640 - Xyrichtys novacula SRR22396732 - Gephyroberyx darwinii SRR22396627 - Gigantura indica SRR21843972 - Stomias affinis SRR22396843 - Conger oceanicus SRR22396668 - Erotelis smaragdus SRR22396758 - Upeneus parvus SRR22396865 - Paraconger caudilimbatus Project initialized successfully. Please open and review the .config file to ensure all required options are specified."},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"exploring-the-mitopilot-gui","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Exploring the MitoPilot GUI","title":"Test Project Tutorial","text":"can now launch R Shiny Graphical User Interface (GUI) examine test project start MitoPilot analysis pipeline.  Nice! can see basic information samples. initializing project, pulled mapping CSV file. can sort samples column, simply click header. can also filter samples using search box top right. left sample ID column two icons. first shows whether sample locked unlocked. sample unlocked, included running current pipeline module. locked sample edited current module, made available next pipeline module. can toggle lock selecting sample (check mark), pressing LOCK top window. Multiple samples can locked unlocked simultaneously. icon shows state sample. states vary depending analysis module automatically updated running pipeline. However, can also manually change state sample selecting sample using STATE button.","code":"# the function to launch the GUI must be called from within your project's directory setwd(wd) MitoPilot::MitoPilot()"},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"modifying-pipeline-parameters","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Modifying Pipeline Parameters","title":"Test Project Tutorial","text":"Within GUI, can modify options step current pipeline module. Select samples clicking empty checkbox top left table. click one default links Preprocess Opts column.  can see default options pre-processing raw FASTQ files. can modify clicking edit checkbox. Let’s change CPUs 4 Memory 40 GB. also change options passed fastp, let’s keep defaults now.  can save new parameter options clicking Parameter set name box, typing new name, clicking Add NEW NAME... dropdown. Finally, click Update bottom right save selection.  ’ve saved new parameter set, can easily access using dropdown menu. screenshot , can see couple parameter sets created.  clicking Update, table now show test samples Preprocess Opts column.  can set different parameters different samples simply selecting set want change repeating process. test dataset, let’s keep everything consistent. Let’s also change Assembly Opts. Repeat process , selecting samples creating new himem setting like .","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"running-the-assemble-module","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Running the Assemble Module","title":"Test Project Tutorial","text":"Let’s get started pipeline! Select samples, click UPDATE button. new window appear.  two options running pipeline. First, copy Nextflow command run terminal window computing system. command also embedded within batch job submission script computing cluster. Running Nextflow command externally GUI may preferable working large numbers samples, since can run pipeline background. Alternatively, can press Start Nextflow button launch pipeline within GUI. requires keep GUI open pipeline running. Since test dataset small, let’s .  ’re ! see Nextflow output printed Progress window. window continually update pipeline progresses. ’re unsure whether pipeline still running, check see gears top right spinning. pipeline module 3 steps: preprocessing (filtering) raw FASTQ files fastp, assembling mitogenomes using GetOrganelle, calculating coverage maps assemblies using bowtie2. test dataset take minutes finish. ’s done, Progress window look something like .  can now click Close go back samples table.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"inspecting-assembly-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Inspecting Assembly Results","title":"Test Project Tutorial","text":"sample table now updated bunch new information.  want locate results files sample, scroll way right click output. open appropriate folder RStudio session. can also view results within MitoPilot GUI. example, select SRR21843972 (Stomias affinis), click details. open new window mitogenome sequence.  Select sequence click Fasta button bottom right. copy FASTA formatted mitogenome clipboard. useful quick BLAST search.  can also click view button, open summary figure new tab, including mean read depth, sequence error rate, GC content.  Notice figure, read depth drops dramatically ends sequence. SRR21843972 unable assemble circular mitogenome due poor read coverage region. assemble circular mitogenome, try running Assemble module different GetOrganelle settings (see Wiki) sequence data.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"problematic-samples","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Problematic Samples","title":"Test Project Tutorial","text":"test dataset, two problematic samples returned failed states. can see samples failed looking exclamation mark state icon. Selecting sample icon clicking STATE button confirm.  One failed sample SRR22396758 (Upeneus parvus). purposefully truncated sample’s FASTQ file 200 reads. reads, sample failed meet min_depth threshold returned message “Insufficient sequencing depth” Notes column. analyzing data, can specify min_depth threshold new_project function. failed sample SRR21844202 (Fundulus majalis). sample plenty data able assemble mitogenome. However, message Notes columns says “Unable resolve single assembly reads.” GetOrganelle produced two alternate assembly paths sample. usually due complicated assembly graphs near repeat region. Please refer GetOrganlle paper information multiple assembly paths. Let’s take peek SRR21844202. Select sample, scroll way right, click details.  can see two assemblies listed . Clicking view show us coverage, error, GC content graphs assembly. Path #1  Path #2  two assembly paths similar, differing slightly around 13,000 bp. can chose move forward just one assembly path ignore .  Alternatively, can use consensus sequence. Select paths click Align button bottom right. sequence alignment pop , showing us two paths 99.9897% sequence similarity. scroll alignment, can see base pair differences. example:  Selecting Trim Consensus remove conflicting regions assembly paths produce shorter consensus sequence alignments. automatically ignore original two assembly paths.  Click close return samples table. see # Paths column SRR21844202 highlighted note indicating assembly edited. sample also automatically changed locked state.  Note: Carefully consider options problematic samples multiple assembly paths. one-size-fits-solution.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"running-the-annotate-module","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Running the Annotate Module","title":"Test Project Tutorial","text":"can now move Annotate pipeline module. module consists annotation step using Mitos2 tRNAscan-SE, taxon-specific curation step refine annotation models, validation step flag possible issues known errors rejected NCBI GenBank. First, need lock successful samples Assemble module. Select samples click LOCK button. use dropdown menu top left navigate Annotate module.  Like , let’s edit Annotate Opts increase memory allocation 36 GB. window, also edit Mitos2 tRNAscan-SE options. future, allow users specify custom reference databases annotation.  can also edit curation options. Currently, one set curation parameters: fish_mito. updated near future.  run Annotate module, select samples, click UPDATE, click Start Nextflow. take minutes. long gears top right spinning, pipeline still running. steps complete, click Close return sample table.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"exploring-annotation-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Exploring Annotation Results","title":"Test Project Tutorial","text":"LOT results explore Annotate module. sample table reports basic stats number protein-coding genes (PCGs), tRNAs, rRNAs. missing column reports number mitochondrial genes annotated (based provided curation model). extra column notes number potentially duplicated genes. Lastly, warnings column indicates many warning flags raised validation step. Samples many warnings require manual curation ensure rejected submission NCBI GenBank.  annotation results sample can examined closely clicking details button. First, let’s examine details good sample, SRR19434536 (Rhinecanthus rectangulus).  sample expected number genes warnings. However, notes column shows MitoPilot still made tweaks annotation curation step. example, start position rRNA rrnL moved 22 bp upstream stop codon NAD2 trimmed 2 bp. Nucleotide sequences (amino acid sequence PCGs) can copied clipboard using nt (aa) buttons far right. helpful ’d like manually BLAST results. Clicking Coverage Map button show plot sequence depth, zooming position highlighted gene  protein coding genes, can click Alignment button show protein alignment annotated gene reference database. Currently, shows top hits (filtered blast using -best_hit_score_edge 0.01) curation process, may one sequences.  default, MitoPilot uses RefSeq BLAST database. like use custom BLAST database, can check Local blast box. MitoPilot return message instructions: run options('MitoPilot.local.db' = '/path//local/blastp/db') within RStudio session. may need restart GUI change take effect.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"editing-annotation-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Editing Annotation Results","title":"Test Project Tutorial","text":"Editing annotations within MitoPilot GUI currently bugged due issues R package Biostrings. Devin Dan working solution.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"running-the-export-module","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Running the Export Module","title":"Test Project Tutorial","text":"Let’s move final step pipeline: Export module. module allows create groups samples, generate alignments files formatted submission GenBank. First, need lock successful samples Annotate module. Select samples click LOCK button. use dropdown menu top left navigate Export module. Next, let’s create group samples. Sort samples table clicking Taxon column, select first five samples click GROUP button. new window appear showing summary information selected samples. Type name group, click Create. can click Close return sample table. Note: can assign new samples existing group. Simply select samples wish add, click GROUP, choose existing group dropdown menu.  sample table now show assignment newly created group. Note: sample can belong one group. MitoPilot produce warning message attempt re-assign sample new group.  can proceed exporting data group. Click EXPORT DATA, open new window.  multiple groups, can select appropriate one dropdown menu. MitoPilot allows create custom FASTA header samples, pulling extra columns CSV file supplied mapping_fn argument new_project function. conveniently allows include metadata needed NCBI GenBank submission. test project, can leave Fasta Header Template default value. also toggle Generate Group-level PCG alignment summary, run alignments protein coding genes group. large groups, can take . ’s useful final quality control check. Click Export generate final files. may take couple minutes, long gears spinning, MitoPilot still running.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"exploring-the-final-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Exploring the Final Results","title":"Test Project Tutorial","text":"gears stopped spinning, export process done! Currently, way find files navigate appropriate directory. default, location YOUR_PROJECT_DIRECTORY//export/YOUR_GROUP_NAME. MitoPilot produce three output files. First, .html file contains visualizations protein coding gene alignment export group. may useful quickly identify samples poor annotations need additional manual curation. Next two files need submission NCBI GenBank. .fasta file contains mitogenome assemblies sample, following header template specified exporting data. MitoPilot attempts adjust start position every assembly start trnF gene.  Lastly .tbl file, standardized 5-column, tab-delimited feature table containing information annotated genes mitogenome.  real dataset, use two files submission NCBI GenBank.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"wrap-up","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Wrap-up","title":"Test Project Tutorial","text":"Congratulations, ’ve reached end test project tutorial! Hopefully now solid understanding MitoPilot interface order begin exploring analyzing samples.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Devin Leopold. Author, maintainer. Dan MacGuigan. Contributor.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leopold D (2024). MitoPilot: Mitogenome assembly, annotation, curation. R package version 0.0.0.9000, https://jonahventures.github.io/MitoPilot/, https://github.com/JonahVentures/MitoPilot.","code":"@Manual{,   title = {MitoPilot: Mitogenome assembly, annotation, and curation},   author = {Devin Leopold},   year = {2024},   note = {R package version 0.0.0.9000,     https://jonahventures.github.io/MitoPilot/},   url = {https://github.com/JonahVentures/MitoPilot}, }"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"overview","dir":"","previous_headings":"","what":"Mitogenome assembly, annotation, and curation","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot package assembly annotation mitochondrial genomes genome skimming data. core application consists Nextflow pipeline wrapped R package, includes R-Shiny graphical interface monitor interact processing parameters outputs. Currently pipeline expects paired-end Illumina reads raw input performs following steps: fastp quality control adapter trimming GetOrganelle mitogenome assembly bowtie2 read mapping calculate coverage error rates. MITOS2 rRNA PCG annotation tRNAscan-SE tRNA annotation Custom scripts gene boundary refinement annotation file formatting Validation flag possible issues known errors rejected NCBI GenBank Manual curation annotations using integrated Shiny App. Custom scripts export data format suitable submission NCBI GenBank MitoPilot currently optimized Fish Mitogenome assembly, developed modularity extensibility mind facilitate broader application future. particular, included reference databases assembly annotation, along default parameters annotation curation validation highly specific fish mitogenomes. However, reference databases annotation parameters can easily updated. However, custom logic annotation curation validation scripts likely need updated optimal performance taxonomic groups. dependencies reference data contained underlying Docker Image (currently hosted drleopold/MitoPilot), customization extension involve updating Docker image appropriately specifying new image Nextflow configuration file (see ). Dockerfile default reference database file included repository reference custom local Daocker Image can generated modifying Dockerfile needed running ./docker/deploy-local.sh latest repository root directory. detailed instructions using custom reference databases (along advanced customization) coming soon.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mitogenome assembly, annotation, and curation","text":"use MitoPilot, need R (>=4.0.0) Nextflow. addition, depending Nextflow executing pipline (e.g., locally remote cluster), may also need install Docker Singularity. R Nextflow installed, install MitoPilot R GitHub: Alternatively, can clone repository install package locally project folder:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"JonahVentures/MitoPilot\") devtools::install()"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot includes set pre-filtered test data function setting example project, new_test_project(). highly recommended use test project ensure successful instillation familiarize pipeline running data. complete tutorial running test project available package vignette, .","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"initializing-a-project","dir":"","previous_headings":"","what":"Initializing A Project","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot workflow begins initializing new project new_project() function. running within RStudio (recommended) new R-project also initialized opened new RStudio session. path specifies new project directory created. path provided, project created current working directory. mapping file csv format must contain columns ID (unique identifier sample), Taxon (eg, species genus name), along R1, R2 (specifying forward revers file names raw Illumina paired end data). addition required fields sample metadata can included mapping file. fields can also used exporting files NCBI GenBank Submissions, metadata important submission (e.g., BioSample ID) can included . data directory contain raw Illumina paired-end reads specified mapping file. executor specifies computational work performed Nextflow. example choosing loocal run pipeline local machine, awsbatch run pipeline AWS Batch. Running new_project() generate executor-specific .config file project directory must edited specify additional parameters pipeline run.","code":"MitoPilot::new_project(   path = \"path/to/project\",   mapping_fn = \"path/to/mapping_file.csv\",   data_dir = \"path/to/raw_data\",   executor = \"local\" )"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"nextflow-configuration-file","dir":"","previous_headings":"Initializing A Project","what":"Nextflow Configuration File","title":"Mitogenome assembly, annotation, and curation","text":"Initializing new project populate .config file project directory may include place holders important parameters, format: <<PARAMETER_NAME>>. example, new configuration files include line rawDir = '<<RAW_DIR>>', updated rawDir = '/path///data' indicating location raw data file specified mapping file. configuration files can also modified specify custom docker images one processing steps. initializing new project review .config file ensure necessary parameters provided.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"database-creation","dir":"","previous_headings":"Initializing A Project","what":"Database Creation","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot makes use Nextflow plugin nf-sqldb store retrieve processing parameters information samples processing status. database (.sqlite) created automatically project initialized stored project directory. interactive MitoPilot GUI also interacts database allow run pipeline, modify parameters, view results. initializing new project, default processing parameters pipeline modules stored database, processing parameters can also passed new_project() function modify initial defaults. example, following options modify allocated memory GetOrganelle command line options : complete list available parameters can set project initialization, see new_db() function documentation. Although MitoPilot GUI provides interface database, troubleshooting often helpful directly explore contents project’s .sqlite database. can easily done R using dplyr extension, {dbplyr}, used extensively MitoPilot package, along {DBI}, database interactions. Alternatively, many interactive tools exist specifically working SQLite databases, DB Browser SQLite.","code":"MitoPilot::new_project(   mapping = \"path/to/mapping_file.csv\",   executor = \"local\",   assemble_memory = 24,   getOrganelle = \"-F 'anonym' -R 20 -k '21,45,65,85,105,115' -J 1 -M 1 --expected-max-size 20000 --target-genome-size 16500\" )"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"running-the-pipeline","dir":"","previous_headings":"","what":"Running The Pipeline","title":"Mitogenome assembly, annotation, and curation","text":"project initialized, pipeline status caa viewed using MitoPilot GUI. GUI can launched running MitoPilot() command R console project directory. GUI open new browser window primarily comprised interactive table, 3 modules (Assembly, Annotate, Export), row represents sample project.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"sample-status","dir":"","previous_headings":"","what":"Sample Status","title":"Mitogenome assembly, annotation, and curation","text":"Assemble Annotate modules icon start row indicates sample status, : (⏳) Hold / Waiting = Indicates sample ready updated, updated next time pipeline run. (🏃) Ready Run = Indicates sample updated next time pipeline run. (✅) Completed Successfully = Indicates sample successfully processed. (⚠️) Completed Warning - Processing complete may failed needs manual review. additional icon indicating whether samples locked () unlocked (). locked sample protected updates Nextflow. Locking sample also make available next MitoPilot module - sample must locked Assemble module proceed Annotatation must locked Annotation modules proceed data Export. “state” “locked” status one samples can modified selecting sample rows table using “STATE” “LOCK” buttons top interface.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"processing-parameters","dir":"","previous_headings":"","what":"Processing parameters","title":"Mitogenome assembly, annotation, and curation","text":"Assemble Annotate modules, processing parameters one samples can modified clicking link relevant column (e.g., Assemble Opts.). open popup can used modify options either selecting existing option set drop-menu, entering new name option set modifying parameters. multiple rows selected table options popup triggered, changes apply selected samples (though selecting locked sample prevent action). existing options set can also modified checking “editing” box popup, may trigger warning edits affect samples currently selected (.e., sample using options set).","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"running-nextflow","dir":"","previous_headings":"","what":"Running Nextflow","title":"Mitogenome assembly, annotation, and curation","text":"one samples “Ready Run” state, Nextflow pipeline can run clicking “UPDATE” button top interface. open popup Start Nextflow button can pressed output pipeline can viewed track progress. Alternatively, Nextflow command displayed popup can copied run terminal project directory, can useful like specify additional command line options override input parameters.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"development-notes","dir":"","previous_headings":"","what":"Development Notes","title":"Mitogenome assembly, annotation, and curation","text":"package uses {renv} package management. cloning repository, run renv::restore() install necessary packages. work package repository, reference MitoPilot project different directory, set MitoPilot.db option location .sqlite database project (e.g. options(\"MitoPilot.db\" = \"~/Jonah/MitoPilot-testing/.sqlite\")). modifying underlying R-package functions references Nextflow pipeline, modifying / adding reference databases specified docker/Dockerfile, docker image rebuilt. docker/deploy-local.sh script can used build local image, docker/deploy-aws.sh docker/deploy-dockerhub.sh scripts can modified deploy remote image account. case, Nextflow .config file modified one processing steps reference new image.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/MitoPilot.html","id":null,"dir":"Reference","previous_headings":"","what":"Open The MitoPilot GUI — MitoPilot","title":"Open The MitoPilot GUI — MitoPilot","text":"Open MitoPilot GUI","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/MitoPilot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open The MitoPilot GUI — MitoPilot","text":"","code":"MitoPilot()"},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Mitogenome Annotation Wrapper — annotate","title":"Mitogenome Annotation Wrapper — annotate","text":"Uses Mito2 tRNAscan-SE annotate mitogenome assembly.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mitogenome Annotation Wrapper — annotate","text":"","code":"annotate(   assembly_fn = NULL,   coverage_fn = NULL,   cpus = 4,   genetic_code = \"2\",   ref_db = \"Chordata\",   ref_dir = \"/home/harpua/Jonah/MitoPilot/ref_dbs/Mitos2\",   mitos_opts = \"--intron 0 --oril 0 --trna 0\",   mitos_condaenv = \"mitos\",   trnaScan_opts = \"-M vert\",   trnaScan_condaenv = \"base\",   out_dir = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mitogenome Annotation Wrapper — annotate","text":"assembly_fn Path mitogenome assembly FASTA file. coverage_fn Path mitogenome assembly coverage stats CSV file. cpus Number CPUs use. genetic_code Genetic code use annotation (default: 2). ref_db Reference Mitos2 database use annotation (default: \"Chordata\"). ref_dir Path Mitos2 reference database. mitos_opts Additional command line options MITOS2. mitos_condaenv Conda environment run MITOS2 (default: \"mitos\"). trnaScan_opts Additional command line options tRNAscan-SE. trnaScan_condaenv Conda environment run tRNAscan-SE (default: \"base\"). out_dir Output directory.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_mitos2.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"Annotate mitochondrial genomes using MITOS2","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_mitos2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"","code":"annotate_mitos2(   assembly = NULL,   topology = \"circular\",   genetic_code = \"2\",   ref_db = \"Chordata\",   ref_dir = \"/home/harpua/Jonah/MitoPilot/ref_dbs/Mitos2\",   mitos_opts = \"--best --intron 0 --oril 0 --trna 0\",   out = NULL,   condaenv = \"mitos\" )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_mitos2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"assembly DNAString object topology \"circular\" \"linear\" genetic_code NCBI genetic code number (default: 2) ref_db Mitos2 reference database (default: \"Chordata\") ref_dir Path Mitos2 reference database mitos_opts Additional command line options MITOS2 output directory condaenv Conda environment run MITOS2 (default: \"mitos\")","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_trnaScan.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"Use tRNAscan-SE annotate tRNAs mitochondrial genome assembly","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_trnaScan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"","code":"annotate_trnaScan(   assembly = NULL,   rotate = TRUE,   trnaScan_opts = \"-M vert\",   cpus = 4,   out = NULL,   condaenv = \"base\" )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_trnaScan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"assembly text string assembly annotate rotate assembly rotated? default = TRUE trnaScan_opts command line options tRNAscan-SE (defatult = `-M vert`) cpus number cpus use (default = 4) output file name condaenv conda environment use (default = \"base\")","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/compare_aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison of AA sequences — compare_aa","title":"Pairwise comparison of AA sequences — compare_aa","text":"Pairwise comparison AA sequences","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/compare_aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison of AA sequences — compare_aa","text":"","code":"compare_aa(query, target, type = c(\"pctId\", \"similarity\"), subMx = \"BLOSUM80\")"},{"path":"https://jonahventures.github.io/MitoPilot/reference/compare_aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison of AA sequences — compare_aa","text":"query focal sequence target target sequence type type comparison perform. Options 'pctId' 'similarity' subMx substitution matrix use comparison. Default BLOSUM80","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Map reads to assembly — coverage","title":"Map reads to assembly — coverage","text":"Map reads assembly","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map reads to assembly — coverage","text":"","code":"coverage(   assembly_fn = NULL,   paired_reads_1 = NULL,   paired_reads_2 = NULL,   unpaired_reads = NULL,   cpus = 4,   outDir = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map reads to assembly — coverage","text":"assembly_fn Path input assembly file (fasta) paired_reads_1 path raw forward input reads (fastq) paired_reads_2 path raw reverse input reads (fastq) unpaired_reads path raw unpaired input reads (fastq) cpus Number CPUs use outDir Path output directory","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Use coverage info to trim linear assemblies — coverage_trim","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"Use coverage info trim linear assemblies","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"","code":"coverage_trim(assembly, stats)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"assembly DNAString object stats data frame coverage stats","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/curate_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation curation for fish mitogenomes — curate_fish_mito","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"Annotation curation fish mitogenomes","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/curate_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"","code":"curate_fish_mito(   annotations_fn = \"~/Downloads/tmp/SRR22396865_annotations_1.csv\",   assembly_fn = \"~/Downloads/tmp/SRR22396865_assembly_1.fasta\",   coverage_fn = \"~/Downloads/tmp/SRR22396865_coverageStats_1.csv\",   genetic_code = 2,   out_dir = NULL,   params = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/curate_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"annotations_fn Path annotations file (csv) assembly_fn Path assembly file (fasta) coverage_fn Path coverage file (csv) genetic_code Genetic code use (default = 2) out_dir Path output directory params Nested list curation parameters. Can also provided base64 encoded json string.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate export NCBI files — export_files","title":"Generate export NCBI files — export_files","text":"Generate export NCBI files","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate export NCBI files — export_files","text":"","code":"export_files(   group = NULL,   IDs = NULL,   fasta_header = paste(\"{ID} [organism={Taxon}] [topology={topology}] [mgcode=2]\",     \"[location=mitochondrion] {Taxon} mitochondrion, complete genome\"),   out_dir = NULL,   start_codons = c(\"ATG\", \"GTG\", \"ATA\", \"ATT\", \"ATC\"),   stop_codons = c(\"TAA\", \"TAG\", \"AGA\", \"AGG\", \"TA\", \"T\"),   generateAAalignments = T )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate export NCBI files — export_files","text":"group (optioanl) exportgroup names IDs One sample IDs export. provided samples export group exported fasta_header Template fot fasta headers. Uses glue syntax (.e. `...`) insert values samples table out_dir directory save exported files start_codons NCBI recognized start codons stop_codons NCBI recognized stop codons generateAAalignments Generate group-level amino acid alignments (default: TRUE)","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_assembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assembly from database — get_assembly","title":"Get assembly from database — get_assembly","text":"Get assembly database","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_assembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assembly from database — get_assembly","text":"","code":"get_assembly(ID, path, scaffold = NULL, con)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_assembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assembly from database — get_assembly","text":"ID sample ID path assembly getOrganelle path scaffold scaffold name(s) get (NULL , default) con database connection","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_top_hits_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top BLASTP hits — get_top_hits_local","title":"Get top BLASTP hits — get_top_hits_local","text":"blastp available path loaded system(), set options(\"MitoPilot.blastp\" = \"/path//blastp/executable\")","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_top_hits_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top BLASTP hits — get_top_hits_local","text":"","code":"get_top_hits_local(ref_db = NULL, query = NULL)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_top_hits_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top BLASTP hits — get_top_hits_local","text":"ref_db reference database query query sequeencs","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/make_PCG_alignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate HTML report woth PCG alignments — make_PCG_alignments","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"Generate HTML report woth PCG alignments","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/make_PCG_alignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"","code":"make_PCG_alignments(export_group = NULL, db = NULL, out_path = NULL)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/make_PCG_alignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"export_group Name submission group db path sqlite database out_path path output files","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a new project database — new_db","title":"Initialize a new project database — new_db","text":"Initialize new project database","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a new project database — new_db","text":"","code":"new_db(   db_path = file.path(here::here(), \".sqlite\"),   mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\",   assemble_cpus = 6,   assemble_memory = 16,   seeds_db = \"/ref_dbs/getOrganelle/seeds/fish_mito.fasta\",   labels_db = \"/ref_dbs/getOrganelle/labels/fish_mito.fasta\",   getOrganelle = paste(\"-F 'anonym'\", \"-R 10 -k '21,45,65,85,105,115'\",     \"--larger-auto-ws\", \"--expected-max-size 20000\", \"--target-genome-size 16500\"),   annotate_cpus = 6,   annotate_memory = 16,   annotate_ref_db = \"Chordata\",   annotate_ref_dir = \"/ref_dbs/Mitos2\",   mitos_opts = \"--intron 0 --oril 0 --trna 0\",   trnaScan_opts = \"-M vert\",   curate_cpus = 4,   curate_memory = 8,   curate_target = \"fish_mito\",   curate_params = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a new project database — new_db","text":"db_path Path new database file mapping_fn Path mapping file mapping_id Column name mapping file use primary key mapping_taxon Column name mapping file contaning Taxonomic identifier (eg, species name) assemble_cpus Default # cpus assembly assemble_memory default memory (GB) assembly seeds_db Path gotOrganelle seeds database labels_db Path gotOrganelle labels database getOrganelle Default getOrganelle command line options annotate_cpus Default # cpus annotation annotate_memory Default memory (GB) annotation annotate_ref_db Default Mitos2 reference database annotate_ref_dir Default Mitos2 reference database directory mitos_opts Default MITOS2 command line options trnaScan_opts Default tRNAscan-SE command line options curate_cpus Default # cpus curation curate_memory Default memory (GB) curation curate_target Default target database curation curate_params Default curation parameters","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize new MitoPilot Project — new_project","title":"Initialize new MitoPilot Project — new_project","text":"Initialize new MitoPilot Project","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize new MitoPilot Project — new_project","text":"","code":"new_project(   path = here::here(),   mapping_fn = NULL,   mapping_id = \"ID\",   data_path = NULL,   min_depth = 2e+06,   executor = c(\"local\", \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\"),   container = \"drleopold/mitopilot\",   config = NULL,   Rproj = TRUE,   force = FALSE,   ... )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize new MitoPilot Project — new_project","text":"path Path project directory (default = current working directory) mapping_fn Path mapping file. csv minimally includes `ID` column unique identifier sample columns `fwd` `rev` specifying names raw paired read inputs. mapping_id name column mapping file contains unique sample identifiers (default = \"ID\"). data_path Path directory raw data located. Can AWS s3 bucket even using AWS pipeline execution.. min_depth Minimum sequencing depth pre-processing proceed assembly (default: 2000000) executor executor use running nextflow pipeline. Must one \"local\" (default) \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\". container docker container use pipeline execution. config (optional) provide path existing custom nextflow config file. provided config file template created based specified executor. Rproj (logical) Initialize open RStudio project project directory (default = TRUE). option effect running interactively RStudio. force (logical) Force recreating existing project database config files (default = FALSE). ... Additional arguments passed default processing parameters `new_db()`","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_test_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a test project — new_test_project","title":"Initialize a test project — new_test_project","text":"function set test project fectch associated data ENA. `n` parameter can used limit number species used test project faster set .","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_test_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a test project — new_test_project","text":"","code":"new_test_project(   path = here::here(),   n = Inf,   full_size = FALSE,   executor = \"local\",   container = \"drleopold/mitopilot\",   Rproj = TRUE,   force = FALSE,   ... )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_test_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a test project — new_test_project","text":"path path directory test project (default = currect working directory). created already exists. n many samples include test project (Default = Inf, include ) full_size (logical) Use full size test data set (default = FALSE). Setting TRUE download raw data ENA, require 10GB take time complete. default set smaller pre-filtered input files fetched MitoPilot github repo. executor executor use running nextflow pipeline. Must one \"local\" (default) \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\". container container use running pipeline. Rproj (logical) Initialize open RStudio project project directory (default = TRUE). now effect running interactively RStudio. force (logical) Force recreating existing project database config files (default = FALSE). ... Additional arguments passed `init_db()`","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/nextflow_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nextflow command to run pipline — nextflow_cmd","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"Generate Nextflow command run pipline","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/nextflow_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"","code":"nextflow_cmd(   workflow = c(\"assemble\", \"annotate\"),   path = NULL,   source = app_sys(\"nextflow\") )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/nextflow_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"workflow module update (default = c(\"assemble\", \"annotate\")) path MitoPilot project directory source Nextflow script source. default, `nextflow/` subdirectory package installation.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/params_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"Default curation validation parameters Fish Mitochondria","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/params_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"","code":"params_fish_mito(alt = list())"},{"path":"https://jonahventures.github.io/MitoPilot/reference/params_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"alt (optional) named list default values modify","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(shiny.launch.browser = T),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/validate_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — validate_fish_mito","title":"Title — validate_fish_mito","text":"Title","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/validate_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — validate_fish_mito","text":"","code":"validate_fish_mito(   annotations_fn = \"~/Downloads/tmp/SRR22396640_annotations_1.csv\",   coverage_fn = \"~/Downloads/tmp/SRR22396640_coverageStats_1.csv\",   params = list(),   out_dir = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/validate_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — validate_fish_mito","text":"annotations_fn path annotations file (csv) coverage_fn path coverage file (csv) params nested list curation/validation parameters. Can also provided base64 encoded JSON string. out_dir output directory","code":""}]
