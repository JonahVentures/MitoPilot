[{"path":"https://jonahventures.github.io/MitoPilot/articles/FAQ.html","id":"how-do-i-fix-an-error-with-exit-status-140","dir":"Articles","previous_headings":"","what":"How do I fix an error with “exit status (140)”?","title":"Frequently Asked Questions","text":"Nextflow log contains error looks something like : usually indicates process ran memory (RAM). Sometimes happen samples, times certain difficult samples need RAM. Try using R Shiny GUI increase requested memory process failed, rerun workflow.","code":"Caused by:   Process `WF2:ANNOTATE:annotate (SAMPLE_ID)` terminated with an error exit status (140)"},{"path":"https://jonahventures.github.io/MitoPilot/articles/FAQ.html","id":"how-do-i-skip-processing-certain-samples","dir":"Articles","previous_headings":"","what":"How do I skip processing certain samples?","title":"Frequently Asked Questions","text":"two ways make MitoPilot skip set samples running Assembly Annotate modules. samples successfully finished steps current module, can lock . , select samples click LOCK button. Locking also make samples available next module. Alternatively, instead locking samples, can modify state. , select samples, click STATE button, choose Pre-Assembly (wait) Pre-Annotate (wait). can applied samples, regardless whether completed current module. Setting state wait can help skip samples produce unexpected errors interrupt workflow.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/FAQ.html","id":"where-can-i-find-complete-scripts-and-logs-for-each-process","dir":"Articles","previous_headings":"","what":"Where can I find complete scripts and logs for each process?","title":"Frequently Asked Questions","text":"MitoPilot copies important output files directory. However, scripts, logs, outfiles created Nextflow saved work directory. work directory automatically set Nextflow can difficult navigate. help , provide NF_work_dir_PROCESS-NAME.txt files sample directory. files contain path Nextflow working directory specific process sample. Note Nextflow working directories, many files hidden, including scripts log files. can list hidden files command line ls -.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/FAQ.html","id":"how-can-i-export-information-found-in-the-gui-tables","dir":"Articles","previous_headings":"","what":"How can I export information found in the GUI tables?","title":"Frequently Asked Questions","text":"include R function MitoPilot::export_db_to_csv. Please keep mind CSV file generated function snapshot database. go back MitoPilot make changes, need export database . Alternatively, familiar SQL, can directly pull necessary information .sqlite database located project directory.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"how-to-use-mitopilot-on-the-smithsonian-hydra-computing-cluster","dir":"Articles","previous_headings":"","what":"How to use MitoPilot on the Smithsonian Hydra computing cluster","title":"NMNH Hydra","text":"need account access Hyrda computing cluster. Instructions available .","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"first-time-setup","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"First time setup","title":"NMNH Hydra","text":"Dan MacGuigan submitted request Hydra team installation Nextflow module. now, need install copy Nextflow cluster. Login Hydra run following. now executable nextflow file home directory. move location PATH. example: allow call nextflow anywhere cluster. Note: must load Hydra Java module (module load tools/java/21.0.2) whenever wish use Nextflow.","code":"# Nextflow installation instructions # from https://www.nextflow.io/docs/latest/install.html cd ~ module load tools/java/21.0.2 curl -s https://get.nextflow.io | bash # install Nextflow chmod +x nextflow # make Nextflow executable mkdir ~/bin # create bin directory, if needed mv ~/nextflow ~/bin/nextflow # move nextflow to bin directory echo 'export PATH=\"${HOME}/bin:${PATH}\"' >> ~/.bashrc # add bin directory to PATH, in case it's not already there source ~/.bashrc"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"launching-rstudio-server","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Launching RStudio server","title":"NMNH Hydra","text":"Next, let’s launch RStudio server, ’ll use install run MitoPilot. login Hydra run conda deactivate avoid package conflicts (may necessary users) run module load tools/R/RStudio/server run start-rstudio-server (may asked run different command first time) leave cluster terminal window open exact command printed start-rstudio-server cluster terminal window leave local terminal window open open web browser enter http://localhost:8787 URL bar enter cluster login credentials access RStudio server commands run new window execute cluster interactive session","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"installing-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Installing MitoPilot","title":"NMNH Hydra","text":"install MitoPilot, use RStudio server window run following. might take . installation successful, ’re ready start using MitoPilot!","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\")   install.packages(\"remotes\") } BiocManager::install(\"JonahVentures/MitoPilot\")"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"updating-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Updating MitoPilot","title":"NMNH Hydra","text":"need update MitoPilot, simply run BiocManager installation command . like ensure ’re using latest MitoPilot version, run remove.packages(\"MitoPilot\") prior installation. updating MitoPilot, recommend restarting R (RStudio menu, Session > Restart R) reloading package library(MitoPilot).","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"launching-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Launching MitoPilot","title":"NMNH Hydra","text":"recommend running MitoPilot within interactive session cluster avoid unnecessary computational burden login nodes. First, initialize interactive session Hydra. Note: must include -pe mthread 2 order enough available RAM building MitoPilot Singularity image. Note: Interactive sessions Hydra can run maximum 24 hours. Additionally, users limited one active interactive session time. interactive session starts, can launch RStudio server. Follow login instructions presented . Rstudio server window open, run library(MitoPilot) load package. Want learn use MitoPilot? Check Test Project Tutorial.","code":"qrsh -l h_rt=24:00:00 -pe mthread 2 conda deactivate module load tools/R/RStudio/server tools/java/21.0.2 start-rstudio-server"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"running-large-mitopilot-jobs","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Running Large MitoPilot Jobs","title":"NMNH Hydra","text":"large number samples process (dozen), recommend running assemble annotate MitoPilot modules batch jobs. Running modules within R Shiny GUI requires maintain open connection cluster. may issues restarting connection breaks Nextflow running. Instead, can “fire forget” submitting batch jobs. First, initialize new project modify desired parameters using GUI. ready, click UPDATE. new window appear.  Rather clicking Start Nextflow button, copy Nextflow command create submission script. provided template . may wish modify job name (-N) log file name (-o). Note: must use options -q lTWFM.sq -l wfmq. special Hydra queue workflow managers like Nextflow. must also include -pe mthread 2 order enough available RAM building MitoPilot Singularity image. Move submission script MitoPilot run directory (example, /pool/public/genomics/macguigand/MitoPilot/22030FL-06-02/run_02/). submit job using qsub MY_SCRIPT_NAME.sh. can monitor progress job using qstat command checking log files. job done, can relaunch GUI inspect results. approach can used annotate module.","code":"#!/bin/sh #$ -N MitoPilot_assembly # MODIFY THIS IF DESIRED #$ -o MitoPilot_assembly.log # MODIFY THIS IF DESIRED #$ -cwd -j y #$ -q lTWFM.sq #$ -l wfmq #$ -pe mthread 2 #$ -S /bin/sh  echo + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME  source ~/.bashrc  module load tools/java/21.0.2 # required for Nextflow on Hydra  # NEXTFLOW COMMAND, example below nextflow -log /pool/public/genomics/macguigand/MitoPilot/22030FL-06-02/run_02/.logs/nextflow.log run /home/macguigand/R/x86_64-pc-linux-gnu-library/4.4/MitoPilot/nextflow -c /pool/public/genomics/macguigand/MitoPilot/22030FL-06-02/run_02/.config -entry WF1  echo = `date` job $JOB_NAME done"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"known-issues","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Known Issues","title":"NMNH Hydra","text":"launching RStudio server receive error message [rserver] ERROR system error 98 (Address already use);, TCP port already use another user. Specify different port range 1025-65535 starting server. E.g., start-studio-server -port 8890.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"how-to-use-mitopilot-on-the-noaa-nmfs-senda-computing-cluster","dir":"Articles","previous_headings":"","what":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","title":"NOAA SEDNA","text":"need account access SEDNA computing cluster. Detailed instructions can found . contact Krista Nichols (krista.nichols@noaa.gov) information.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"first-time-setup","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"First time setup","title":"NOAA SEDNA","text":"first time setup, need create Mamba environment MitoPilot dependencies Nextflow Singularity. also include version R environment; issues installing pipeline cluster’s R module. Log NOAA NMFS VPN, log SEDNA. ’ve never used mamba SEDNA , run following. Let’s create MitoPilot_deps mamba environment. may take . can now call nextflow singularity anywhere cluster, long MitoPilot_deps environment activated.","code":"/opt/bioinformatics/mambaforge/bin/mamba init mamba create --name MitoPilot_deps bioconda::nextflow conda-forge::singularity conda-forge::zlib conda-forge::r-base -y"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"installing-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Installing MitoPilot","title":"NOAA SEDNA","text":"Time install MitoPilot! Activate new mamba environment launch R. new R session, run following install MitoPilot. take install necessary dependencies. install successful, can exit R session using quit().","code":"# activate the mamba environment you just created mamba activate MitoPilot_deps  # launch R R if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\")   install.packages(\"remotes\") } BiocManager::install(\"JonahVentures/MitoPilot\")"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"updating-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Updating MitoPilot","title":"NOAA SEDNA","text":"need update MitoPilot, simply run BiocManager installation command . like ensure ’re using latest MitoPilot version, run remove.packages(\"MitoPilot\") prior installation. updating MitoPilot, recommend restarting R (RStudio menu, Session > Restart R) reloading package library(MitoPilot).","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"setting-up-rstudio-server","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Setting up RStudio server","title":"NOAA SEDNA","text":"Next need set RStudio server. version Rstudio server must match R version MitoPilot_deps mamba environment. able see R version running mamba activate MitoPilot_deps;mamba list. SEDNA terminal, run following. may take minutes download set Singularity image file. Now let’s make helper script launch RStudio server. , make sure ’re setting Rstudio_version correctly.","code":"# Make a directory to host R-studio.  mkdir -p ~/rstudio cd ~/rstudio  # activate cluster's singularity environment mamba activate singularity-3.8.6  # Pull R studio from singularity # change version number if needed singularity pull docker://rocker/rstudio:4.4.2  # additional setup mkdir -p run var-lib-rstudio-server printf 'provider=sqlite\\ndirectory=/var/lib/rstudio-server\\n' > database.conf # set up bin directory if it doesn't exist mkdir ~/bin   # create helper script cat > ~/bin/start-rstudio-server-MitoPilot <<'EOL' #!/bin/bash # script to start Rstudio server  # and print instructions on how to connect  # modify to match your Rstudio server version Rstudio_version=\"4.4.2\"  cd ~/rstudio source ~/.bashrc  mamba activate MitoPilot_deps  # Assign yourself a port PORT=$(shuf -i 8000-9000 -n 1)  HOST=$( hostname )  GREEN='\\033[0;32m' # green ANSI RED='\\033[0;31m' # red ANSI NC='\\033[0m' # no color ANSI  echo \"\" echo -e \"${GREEN}TO ACCESS RSTUDIO SERVER${NC}\" echo \"In a terminal on your local system, run the following command:\" echo \"ssh -N -L 8787:${HOST}:${PORT} ${USER}@sedna.nwfsc2.noaa.gov\" echo \"\" echo \"Enter your password when prompted\" echo \"If successful, nothing will happen\" echo \"Then open http://localhost:8787 on a local web browser\" echo \"\"  echo -e \"${RED}NOTE:${NC} This window and your local terminal session\" echo \"must remain open in order to access the Rstudio server\" echo \"\"  mamba activate   # set Singularity temp dir, if needed # if not set, Singularity will write to /tmp on the compute nodes #mkdir -p \"${HOME}/.singularity/temp\" #export SINGULARITY_TMPDIR=\"${HOME}/.singularity/temp\"  singularity exec \\  --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,${HOME}/.conda/envs/MitoPilot_deps/bin,${HOME}/.conda/envs/MitoPilot_deps/lib \\  --env APPEND_PATH=\"${HOME}/.conda/envs/MitoPilot_deps/bin:${HOME}/.conda/envs/MitoPilot_deps/lib\" \\  rstudio_${Rstudio_version}.sif \\  rserver --www-address=0.0.0.0 --www-port=${PORT} --server-user=${USER} EOL  # make script executable chmod 755 ~/bin/start-rstudio-server-MitoPilot"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"launching-rstudio-server","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Launching RStudio server","title":"NOAA SEDNA","text":"launch RStudio server, first start interactive session SENDA. won’t need much computing resources, since MitoPilot uses Nextflow distribute analyses. run following. Follow instructions access RStudio server session. look something like .","code":"srun -c 2 --mem=16GB -p standard --pty /bin/bash mamba activate MitoPilot_deps start-rstudio-server-MitoPilot TO ACCESS RSTUDIO SERVER In a terminal on your local system, run the following command: ssh -N -L 8787:node01.cluster:8377 dmacguigan@sedna.nwfsc2.noaa.gov  Enter your password when prompted If successful, nothing will happen Then open http://localhost:8787 on a local web browser  NOTE: This window and your local terminal session must remain open in order to access the Rstudio server"},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"launching-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Launching MitoPilot","title":"NOAA SEDNA","text":"opened RStudio server session, run library(MitoPilot) load package. see message Nextflow successful. Want learn use MitoPilot? Check Test Project Tutorial.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"running-large-mitopilot-jobs","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Running Large MitoPilot Jobs","title":"NOAA SEDNA","text":"SEDNA currently support running Nextflow within R Shiny GUI. small number samples, run Nextflow interactive session. However, requires maintain open connection cluster. large datasets, may issues restarting connection breaks Nextflow running. Therefore, large number samples process (dozen), recommend running assemble annotate MitoPilot modules batch jobs. First, initialize new project modify desired parameters using GUI. ready, click UPDATE. new window appear.  Rather clicking Start Nextflow button, copy Nextflow command create submission script. provided template . may wish modify job name (--job-name) output file names (--output --error). Move submission script MitoPilot run directory (example, /home/dmacguigan/MitoPilot/test/2025_1_2/). submit job using sbatch MY_SCRIPT_NAME.sh. can monitor progress job using squeue command checking log files. job done, can relaunch GUI inspect results. approach can used annotate module.","code":"#!/bin/bash #SBATCH --job-name=MitoPilot_assembly # MODIFY THIS IF DESIRED #SBATCH --output=MitoPilot_assembly.out # MODIFY THIS IF DESIRED #SBATCH --error=MitoPilot_assembly.err # MODIFY THIS IF DESIRED #SBATCH -p standard #SBATCH -c 1 #SBATCH --mem=8G #SBATCH -t 24:00:00  echo + `date` job $SLURM_JOB_NAME started in $SLURM_JOB_PARTITION with jobID=$SLURM_JOBID on $SLURM_JOB_NODELIST  source ~/.bashrc mamba activate MitoPilot_deps  # MITOPILOT NEXTFLOW COMMAND, example below nextflow -log /home/dmacguigan/MitoPilot/test/2025_1_2/.logs/nextflow.log run /home/dmacguigan/.conda/envs/MitoPilot_deps/lib/R/library/MitoPilot/nextflow -c /home/dmacguigan/MitoPilot/test/2025_1_2/.config -entry WF1  echo = `date` job $SLURM_JOB_NAME done"},{"path":[]},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"installation","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Installation","title":"Test Project Tutorial","text":"running MitoPilot samples, recommend trying included test project, consisting Illumina data 13 fish species. following tutorial provides step--step walthrough. First, make sure R (>=4.0.0) Nextflow installed. tutorial also assumes using RStudio interface R. ’re working computing cluster, recommend checking RStudio Server. provided detailed instructions using RStuio Server Smithsonian Hydra NOAA SEDNA computing clusters. Next ’ll need install MitoPilot R package GitHub. Within RStudio, run following.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } BiocManager::install(\"JonahVentures/MitoPilot\")"},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"project-initialization","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Project Initialization","title":"Test Project Tutorial","text":"Now can initialize test project. data, use function MitoPilot::new_project. However, test data, ’ll use MitoPilot::new_test_project. Note:using execution environment currently supported, use config = config.MyEnv pass custom Nextflow config new_test_project function. FEATURE CURRENTLY DEVELOPMENT. test project successfully initialized, see following.","code":"# load the package library(MitoPilot)  # specify the directory where your test project will be created wd = \"/pool/public/genomics/macguigand/MitoPilot/testing/2024_12_13\"  # specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\" ex = \"NMNH_Hydra\"  # initialize the test project MitoPilot::new_test_project(     path = wd,      executor = ex,      container = \"drleopold/mitopilot\",     full_size = FALSE,     Rproj = FALSE ) SRR22396794 - Psychrolutes paradoxus   SRR22396940 - Psenes pellucidus SRR22396740 - Hoplostethus occidentalis SRR21844202 - Fundulus majalis SRR22396640 - Xyrichtys novacula SRR22396732 - Gephyroberyx darwinii SRR22396627 - Gigantura indica SRR21843972 - Stomias affinis SRR22396843 - Conger oceanicus SRR22396668 - Erotelis smaragdus SRR22396758 - Upeneus parvus SRR22396865 - Paraconger caudilimbatus Project initialized successfully. Please open and review the .config file to ensure all required options are specified."},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"exploring-the-mitopilot-gui","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Exploring the MitoPilot GUI","title":"Test Project Tutorial","text":"can now launch R Shiny Graphical User Interface (GUI) examine test project start MitoPilot analysis pipeline.  Nice! can see basic information samples. initializing project, pulled mapping CSV file. can sort samples column, simply click header. can also filter samples using search box top right. left sample ID column two icons. first shows whether sample locked unlocked. sample unlocked, included running current pipeline module. locked sample edited current module, made available next pipeline module. can toggle lock selecting sample (check mark), pressing LOCK top window. Multiple samples can locked unlocked simultaneously. icon shows state sample. states vary depending analysis module automatically updated running pipeline. However, can also manually change state sample using STATE button. example, Assemble module prevent samples running pipeline manually setting states Hold / Waiting.","code":"# the function to launch the GUI must be called from within your project's directory setwd(wd) MitoPilot::MitoPilot()"},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"modifying-pipeline-parameters","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Modifying Pipeline Parameters","title":"Test Project Tutorial","text":"Within GUI, can modify options step current pipeline module. Select samples clicking empty checkbox top left table. click one default links Preprocess Opts column.  can see default options pre-processing raw FASTQ files. can modify clicking edit checkbox. Let’s change CPUs 4 Memory 16 GB. also change options passed fastp, let’s keep defaults now.  can save new parameter options clicking Parameter set name box, typing new name, clicking Add NEW NAME... dropdown. Finally, click Update bottom right save selection.  ’ve saved new parameter set, can easily access using dropdown menu. screenshot , can see couple parameter sets created.  clicking Update, table now show test samples Preprocess Opts column.  can set different parameters different samples simply selecting set want change repeating process. test dataset, let’s keep everything consistent. Let’s also change Assembly Opts. Repeat process , selecting samples creating new himem setting like .","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"running-the-assemble-module","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Running the Assemble Module","title":"Test Project Tutorial","text":"Let’s get started pipeline! Select samples, click UPDATE button. new window appear.  three options running pipeline. First, copy Nextflow command run terminal window. requires maintain open connection Nextflow running, may cause issues large, complex datasets. Alternatively, can embed Nextflow command within batch job submission script computing cluster. allows run analyses background, preferable datasets large number samples may take several hours process. provided instructions running MitoPilot Nextflow commands batch jobs Smithsonian Hydra NOAA SEDNA computing clusters. Lastly, small datasets, can press Start Nextflow button run pipeline within GUI. requires keep GUI open pipeline running. Note:Currently, Start Nextflow button compatible NOAA SEDNA computing cluster. Please use command line batch job method, making sure run mamba activate MitoPilot_deps prior calling Nextflow. Since test dataset small, let’s run Nextflow within GUI. Click Start Nextflow launch pipeline.  ’re ! see Nextflow output printed Progress window. window continually update pipeline progresses. ’re unsure whether pipeline still running, check see gears top right spinning. pipeline module 3 steps: preprocessing (filtering) raw FASTQ files fastp, assembling mitogenomes using GetOrganelle, calculating coverage maps assemblies using bowtie2. ’re working computing cluster, Nextflow distributes analyses across multiple batch jobs. can allow run hundreds samples simultaneously. can use cluster’s job scheduler check status MitoPilot jobs. samples may finish faster others.  Additionally, may notice samples fail certain steps. Often due memory error, MitoPilot retry failed samples RAM. Nextflow log tracks number failed samples retries.  test dataset take minutes finish. ’s done, Progress window look something like .  can now click Close go back samples table.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"inspecting-assembly-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Inspecting Assembly Results","title":"Test Project Tutorial","text":"sample table now updated bunch new information.  want locate results files sample, scroll way right click output. open appropriate folder RStudio session. can also view results within MitoPilot GUI. example, select SRR21843972 (Stomias affinis), click details. open new window mitogenome sequence.  Select sequence click Fasta button bottom right. copy FASTA formatted mitogenome clipboard. useful quick BLAST search.  can also click view button, open summary figure new tab, including mean read depth, sequence error rate, GC content.  Notice figure, read depth drops dramatically ends sequence. SRR21843972 unable assemble circular mitogenome due poor read coverage region. assemble circular mitogenome, try running Assemble module different GetOrganelle settings (see Wiki) sequence data.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"problematic-samples","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Problematic Samples","title":"Test Project Tutorial","text":"test dataset, two problematic samples returned failed states. can see samples failed looking exclamation mark state icon. Selecting sample icon clicking STATE button confirm.  One failed sample SRR22396758 (Upeneus parvus). purposefully truncated sample’s FASTQ file 200 reads. reads, sample failed meet min_depth threshold returned message “Insufficient sequencing depth” Notes column. analyzing data, can specify min_depth threshold new_project function. failed sample SRR21844202 (Fundulus majalis). sample plenty data able assemble mitogenome. However, message Notes columns says “Unable resolve single assembly reads.” GetOrganelle produced two alternate assembly paths sample. usually due complicated assembly graphs near repeat region. Please refer GetOrganlle paper information multiple assembly paths. Let’s take peek SRR21844202. Select sample, scroll way right, click details.  can see two assemblies listed . Clicking view show us coverage, error, GC content graphs assembly. Path #1  Path #2  two assembly paths similar, differing slightly around 13,000 bp. can chose move forward just one assembly path ignore .  Alternatively, can use consensus sequence. Select paths click Align button bottom right. sequence alignment pop , showing us two paths 99.9897% sequence similarity. scroll alignment, can see base pair differences. example:  Selecting Trim Consensus remove conflicting regions assembly paths produce shorter consensus sequence alignments. automatically ignore original two assembly paths.  Click close return samples table. see # Paths column SRR21844202 highlighted note indicating assembly edited. sample also automatically changed locked state.  Note: Carefully consider options problematic samples multiple assembly paths. one-size-fits-solution.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"running-the-annotate-module","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Running the Annotate Module","title":"Test Project Tutorial","text":"can now move Annotate pipeline module. module consists annotation step using Mitos2 tRNAscan-SE, taxon-specific curation step refine annotation models, validation step flag possible issues known errors rejected NCBI GenBank. First, need lock successful samples Assemble module. Select samples except SRR22396758 (Upeneus parvus) click LOCK button. use dropdown menu top left navigate Annotate module.  Like , let’s edit Annotate Opts increase memory allocation 60 GB. window, also edit Mitos2 tRNAscan-SE options. future, allow users specify custom reference databases annotation.  can also edit curation options. Currently, one set curation parameters: fish_mito. updated near future.  run Annotate module, select samples, click UPDATE, click Start Nextflow. take minutes. long gears top right spinning, pipeline still running.  steps complete, ’ll see summary message printed bottom Progress window. Click Close return sample table.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"exploring-annotation-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Exploring Annotation Results","title":"Test Project Tutorial","text":"LOT results explore Annotate module. sample table reports basic stats number protein-coding genes (PCGs), tRNAs, rRNAs. missing column reports number mitochondrial genes annotated (based provided curation model). extra column notes number potentially duplicated genes. Lastly, warnings column indicates many warning flags raised validation step. Samples many warnings require manual curation ensure rejected submission NCBI GenBank.  annotation results sample can examined closely clicking details button. First, let’s examine details good sample, SRR19434536 (Rhinecanthus rectangulus).  sample expected number genes warnings. However, notes column shows MitoPilot still made tweaks annotation curation step. example, start position rRNA rrnL moved 22 bp upstream stop codon NAD2 trimmed 2 bp. Nucleotide sequences (amino acid sequence PCGs) can copied clipboard using nt (aa) buttons far right. helpful ’d like manually BLAST results. Clicking Coverage Map button show plot sequence depth, zooming position highlighted gene  protein coding genes, can click Alignment button show protein alignment annotated gene reference database. Currently, shows top hits (filtered blast using -best_hit_score_edge 0.01) curation process, may one sequences.  default, MitoPilot uses RefSeq BLAST database. like use custom BLAST database, can check Local blast box. MitoPilot return message instructions: run options('MitoPilot.local.db' = '/path//local/blastp/db') within RStudio session. need restart MitoPilot GUI change take effect.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"editing-annotation-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Editing Annotation Results","title":"Test Project Tutorial","text":"MitoPilot offers basic functions manually edit annotation results. Let’s open alignment SRR19434536 (Rhinecanthus rectangulus) “cox1” gene. Clicking EDIT button brings options change start stop position annotation. Try clicking + button next START. take seconds, since MitoPilot redo alignments. see “cox1 (focal)” sequence start position shifted.  clearly looks like worse alignment. Click RESET undo changes. can also delete annotations selecting clicking Delete. careful , ’s easy way add annotation back without running sample Annotate module . Please note annotation editing bit temperamental may encounter bugs. Additional details annotation editing made available soon.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"running-the-export-module","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Running the Export Module","title":"Test Project Tutorial","text":"Let’s move final step pipeline: Export module. module allows create groups samples, generate alignments files formatted submission GenBank. First, need lock successful samples Annotate module. Select samples click LOCK button. use dropdown menu top left navigate Export module. Next, let’s create group samples. Sort samples table clicking Taxon column, select first five samples click GROUP button. new window appear showing summary information selected samples. Type name group, click Create. can click Close return sample table. Note: can assign new samples existing group. Simply select samples wish add, click GROUP, choose existing group dropdown menu.  sample table now show assignment newly created group. Note: sample can belong one group. MitoPilot produce warning message attempt re-assign sample new group.  can proceed exporting data group. Click EXPORT DATA, open new window. samples added group can exported manner.  multiple groups, can select appropriate one dropdown menu. MitoPilot allows create custom FASTA header samples, pulling extra columns CSV file supplied mapping_fn argument new_project function. conveniently allows include metadata needed NCBI GenBank submission. test project, can leave Fasta Header Template default value. also toggle Generate Group-level PCG alignment summary, run alignments protein coding genes group. large groups, can take . ’s useful final quality control check. Click Export generate final files. may take couple minutes, long gears spinning, MitoPilot still running.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"exploring-the-final-results","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Exploring the Final Results","title":"Test Project Tutorial","text":"gears stopped spinning, export process done! see path final export location. default, location YOUR_PROJECT_DIRECTORY//export/YOUR_GROUP_NAME. MitoPilot produce three output files. First, .html file contains visualizations protein coding gene alignment export group. may useful quickly identify samples poor annotations need additional manual curation.  example, ATP8 annotation “SRR22396640” clearly stands compared samples export group.  Next two files need submission NCBI GenBank. .fasta file contains mitogenome assemblies sample, following header template specified exporting data. MitoPilot attempts adjust start position every assembly start trnF gene.  Additionally .tbl file, standardized 5-column, tab-delimited feature table containing information annotated genes mitogenome.  real dataset, use two files submission NCBI GenBank. Lastly, export directory contains sub-directory GFFs annotations sample GFF3 format. GFF files can loaded tools like Geneious additional manual inspection prior submission.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/articles/test-project.html","id":"wrap-up","dir":"Articles","previous_headings":"{MitoPilot} - Test Project Tutorial","what":"Wrap-up","title":"Test Project Tutorial","text":"Congratulations, ’ve reached end test project tutorial! Hopefully now solid understanding MitoPilot interface can begin analyze explore mitogenome datasets.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Devin Leopold. Author, maintainer. Dan MacGuigan. Contributor.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leopold D (2025). MitoPilot: Mitogenome assembly, annotation, curation. R package version 0.0.0.9000, https://jonahventures.github.io/MitoPilot/, https://github.com/JonahVentures/MitoPilot.","code":"@Manual{,   title = {MitoPilot: Mitogenome assembly, annotation, and curation},   author = {Devin Leopold},   year = {2025},   note = {R package version 0.0.0.9000,     https://jonahventures.github.io/MitoPilot/},   url = {https://github.com/JonahVentures/MitoPilot}, }"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"overview","dir":"","previous_headings":"","what":"Mitogenome assembly, annotation, and curation","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot package assembly annotation mitochondrial genomes genome skimming data. core application consists Nextflow pipeline wrapped R package, includes R-Shiny graphical interface monitor interact processing parameters outputs. Currently pipeline expects paired-end Illumina reads raw input performs following steps: fastp quality control adapter trimming GetOrganelle mitogenome assembly bowtie2 read mapping calculate coverage error rates. MITOS2 rRNA PCG annotation tRNAscan-SE tRNA annotation Custom scripts gene boundary refinement annotation file formatting Validation flag possible issues known errors rejected NCBI GenBank Manual curation annotations using integrated Shiny App. Custom scripts export data format suitable submission NCBI GenBank MitoPilot currently optimized Fish mitogenome assembly, developed modularity extensibility mind facilitate broader application future. particular, included reference databases assembly annotation, along default parameters annotation curation validation highly specific fish mitogenomes. However, reference databases annotation parameters can easily updated. However, custom logic annotation curation validation scripts likely need updated optimal performance taxonomic groups. dependencies reference data contained underlying Docker Image (currently hosted drleopold/MitoPilot), customization extension involve updating Docker image appropriately specifying new image Nextflow configuration file (see ). Dockerfile default reference database file included repository reference custom local Docker Image can generated modifying Dockerfile needed running ./docker/deploy-local.sh latest repository root directory. detailed instructions using custom reference databases (along advanced customization) coming soon.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mitogenome assembly, annotation, and curation","text":"use MitoPilot, need R (>=4.4.0) Nextflow. addition, depending Nextflow executing pipeline (e.g., locally remote cluster), may also need install Docker Singularity. R Nextflow installed, install MitoPilot R GitHub: Alternatively, can clone repository install package locally project folder:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"JonahVentures/MitoPilot\") devtools::install()"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot includes set pre-filtered test data function setting example project, new_test_project(). highly recommended use test project ensure successful installation familiarize pipeline running data. complete tutorial running test project available package vignette, .","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"initializing-a-project","dir":"","previous_headings":"","what":"Initializing A Project","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot workflow begins initializing new project new_project() function. running within RStudio (recommended) new R-project also initialized opened new RStudio session. path specifies new project directory created. path provided, project created current working directory. mapping file csv format must contain columns ID (unique identifier sample), Taxon (eg, species genus name), along R1, R2 (specifying forward revers file names raw Illumina paired end data). addition required fields sample metadata can included mapping file. fields can also used exporting files NCBI GenBank Submissions, metadata important submission (e.g., BioSample ID) can included . Full path data directory, contain raw Illumina paired-end reads specified mapping file. executor specifies computational work performed Nextflow. example choosing local run pipeline local machine, awsbatch run pipeline AWS Batch. Running new_project() generate executor-specific .config file project directory must edited specify additional parameters pipeline run. NOTE: running MitoPilot via RStudio Server computing cluster, likely need specify Rproj = FALSE calling MitoPilot::new_project function.","code":"MitoPilot::new_project(   path = \"path/to/project\",   mapping_fn = \"path/to/mapping_file.csv\",   data_path = \"path/to/raw_data\",   executor = \"local\" )"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"nextflow-configuration-file","dir":"","previous_headings":"Initializing A Project","what":"Nextflow Configuration File","title":"Mitogenome assembly, annotation, and curation","text":"Initializing new project populate .config file project directory may include place holders important parameters, format: <<PARAMETER_NAME>>. example, new configuration files include line rawDir = '<<RAW_DIR>>', updated rawDir = '/path///data' indicating location raw data file specified mapping file. configuration files can also modified specify custom docker images one processing steps. initializing new project review .config file ensure necessary parameters provided.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"database-creation","dir":"","previous_headings":"Initializing A Project","what":"Database Creation","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot makes use Nextflow plugin nf-sqldb store retrieve processing parameters information samples processing status. database (.sqlite) created automatically project initialized stored project directory. interactive MitoPilot GUI also interacts database allow run pipeline, modify parameters, view results. initializing new project, default processing parameters pipeline modules stored database, processing parameters can also passed new_project() function modify initial defaults. example, following options modify allocated memory GetOrganelle command line options : complete list available parameters can set project initialization, see new_db() function documentation. Although MitoPilot GUI provides interface database, troubleshooting often helpful directly explore contents project’s .sqlite database. can easily done R using dplyr extension, {dbplyr}, used extensively MitoPilot package, along {DBI}, database interactions. Alternatively, many interactive tools exist specifically working SQLite databases, DB Browser SQLite.","code":"MitoPilot::new_project(   mapping = \"path/to/mapping_file.csv\",   executor = \"local\",   assemble_memory = 24,   getOrganelle = \"-F 'anonym' -R 20 -k '21,45,65,85,105,115' -J 1 -M 1 --expected-max-size 20000 --target-genome-size 16500\" )"},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"database-modification","dir":"","previous_headings":"Initializing A Project","what":"Database Modification","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot databases can modified using R helper functions update_sample_metadata(), update_sample_seqdata(), add_samples(). must close existing connections (e.g. MitoPilot GUI) prior modifying database. functions automatically create backups database case need revert changes. information, please see manual pages functions.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"running-the-pipeline","dir":"","previous_headings":"","what":"Running The Pipeline","title":"Mitogenome assembly, annotation, and curation","text":"project initialized, pipeline status caa viewed using MitoPilot GUI. GUI can launched running MitoPilot() command R console project directory. GUI open new browser window primarily comprised interactive table, 3 modules (Assembly, Annotate, Export), row represents sample project. Please note tested MitoPilot GUI Chrome Firefox web browsers. known bugs running GUI Safari.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"sample-status","dir":"","previous_headings":"","what":"Sample Status","title":"Mitogenome assembly, annotation, and curation","text":"Assemble Annotate modules icon start row indicates sample status, : (⏳) Hold / Waiting = Indicates sample ready updated, updated next time pipeline run. (🏃) Ready Run = Indicates sample updated next time pipeline run. (✅) Completed Successfully = Indicates sample successfully processed. (⚠️) Completed Warning - Processing complete may failed needs manual review. additional icon indicating whether samples locked () unlocked (). locked sample protected updates Nextflow. Locking sample also make available next MitoPilot module - sample must locked Assemble module proceed Annotation must locked Annotation modules proceed data Export. “state” “locked” status one samples can modified selecting sample rows table using “STATE” “LOCK” buttons top interface.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"processing-parameters","dir":"","previous_headings":"","what":"Processing parameters","title":"Mitogenome assembly, annotation, and curation","text":"Assemble Annotate modules, processing parameters one samples can modified clicking link relevant column (e.g., Assemble Opts.). open popup can used modify options either selecting existing option set drop-menu, entering new name option set modifying parameters. multiple rows selected table options popup triggered, changes apply selected samples (though selecting locked sample prevent action). existing options set can also modified checking “editing” box popup, may trigger warning edits affect samples currently selected (.e., sample using options set).","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"running-nextflow","dir":"","previous_headings":"","what":"Running Nextflow","title":"Mitogenome assembly, annotation, and curation","text":"one samples “Ready Run” state, Nextflow pipeline can run clicking “UPDATE” button top interface. open popup Start Nextflow button can pressed output pipeline can viewed track progress. Alternatively, Nextflow command displayed popup can copied run terminal project directory, can useful like specify additional command line options override input parameters.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/index.html","id":"development-notes","dir":"","previous_headings":"","what":"Development Notes","title":"Mitogenome assembly, annotation, and curation","text":"package uses {renv} package management. cloning repository, run renv::restore() install necessary packages. work package repository, reference MitoPilot project different directory, set MitoPilot.db option location .sqlite database project (e.g. options(\"MitoPilot.db\" = \"~/Jonah/MitoPilot-testing/.sqlite\")). modifying underlying R-package functions references Nextflow pipeline, modifying / adding reference databases specified docker/Dockerfile, docker image rebuilt. docker/deploy-local.sh script can used build local image, docker/deploy-aws.sh docker/deploy-dockerhub.sh scripts can modified deploy remote image account. case, Nextflow .config file modified one processing steps reference new image.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/MitoPilot.html","id":null,"dir":"Reference","previous_headings":"","what":"Open The MitoPilot GUI — MitoPilot","title":"Open The MitoPilot GUI — MitoPilot","text":"Open MitoPilot GUI","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/MitoPilot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open The MitoPilot GUI — MitoPilot","text":"","code":"MitoPilot()"},{"path":"https://jonahventures.github.io/MitoPilot/reference/add_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Add samples to project database — add_samples","title":"Add samples to project database — add_samples","text":"Add new samples existing project database. samples inherit default processing options. Creates backup existing database prior updating.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/add_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add samples to project database — add_samples","text":"","code":"add_samples(   path = \".\",   update_mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\" )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/add_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add samples to project database — add_samples","text":"path Path project directory (default = current working directory) update_mapping_fn Path update mapping CSV file. Must contain columns \"ID\", \"Taxon, \"R1\", \"R2\" mapping_id Column name update mapping file use primary key mapping_taxon Column name update mapping file containing Taxonomic identifier (eg, species name)","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Mitogenome Annotation Wrapper — annotate","title":"Mitogenome Annotation Wrapper — annotate","text":"Uses Mito2 tRNAscan-SE annotate mitogenome assembly.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mitogenome Annotation Wrapper — annotate","text":"","code":"annotate(   assembly_fn = NULL,   coverage_fn = NULL,   cpus = 4,   genetic_code = \"2\",   ref_db = \"Chordata\",   ref_dir = \"/home/harpua/Jonah/MitoPilot/ref_dbs/Mitos2\",   mitos_opts = \"--intron 0 --oril 0 --trna 0\",   mitos_condaenv = \"mitos\",   trnaScan_opts = \"-M vert\",   trnaScan_condaenv = \"base\",   out_dir = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mitogenome Annotation Wrapper — annotate","text":"assembly_fn Path mitogenome assembly FASTA file. coverage_fn Path mitogenome assembly coverage stats CSV file. cpus Number CPUs use. genetic_code Genetic code use annotation (default: 2). ref_db Reference Mitos2 database use annotation (default: \"Chordata\"). ref_dir Path Mitos2 reference database. mitos_opts Additional command line options MITOS2. mitos_condaenv Conda environment run MITOS2 (default: \"mitos\"). trnaScan_opts Additional command line options tRNAscan-SE. trnaScan_condaenv Conda environment run tRNAscan-SE (default: \"base\"). out_dir Output directory.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_mitos2.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"Annotate mitochondrial genomes using MITOS2","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_mitos2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"","code":"annotate_mitos2(   assembly = NULL,   topology = \"circular\",   genetic_code = \"2\",   ref_db = \"Chordata\",   ref_dir = \"/home/harpua/Jonah/MitoPilot/ref_dbs/Mitos2\",   mitos_opts = \"--best --intron 0 --oril 0 --trna 0\",   out = NULL,   condaenv = \"mitos\" )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_mitos2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"assembly DNAString object topology \"circular\" \"linear\" genetic_code NCBI genetic code number (default: 2) ref_db Mitos2 reference database (default: \"Chordata\") ref_dir Path Mitos2 reference database mitos_opts Additional command line options MITOS2 output directory condaenv Conda environment run MITOS2 (default: \"mitos\")","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_trnaScan.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"Use tRNAscan-SE annotate tRNAs mitochondrial genome assembly","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_trnaScan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"","code":"annotate_trnaScan(   assembly = NULL,   rotate = TRUE,   trnaScan_opts = \"-M vert\",   cpus = 4,   out = NULL,   condaenv = \"base\" )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/annotate_trnaScan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"assembly text string assembly annotate rotate assembly rotated? default = TRUE trnaScan_opts command line options tRNAscan-SE (defatult = `-M vert`) cpus number cpus use (default = 4) output file name condaenv conda environment use (default = \"base\")","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/backwards_compatibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Update old project database for backwards compatibility — backwards_compatibility","title":"Update old project database for backwards compatibility — backwards_compatibility","text":"Update old project database backwards compatibility. Adds \"reviewed\" column annotate SQL table.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/backwards_compatibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update old project database for backwards compatibility — backwards_compatibility","text":"","code":"backwards_compatibility(path = \".\")"},{"path":"https://jonahventures.github.io/MitoPilot/reference/backwards_compatibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update old project database for backwards compatibility — backwards_compatibility","text":"path Path project directory (default = current working directory)","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/compare_aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison of AA sequences — compare_aa","title":"Pairwise comparison of AA sequences — compare_aa","text":"Pairwise comparison AA sequences","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/compare_aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison of AA sequences — compare_aa","text":"","code":"compare_aa(query, target, type = c(\"pctId\", \"similarity\"), subMx = \"BLOSUM80\")"},{"path":"https://jonahventures.github.io/MitoPilot/reference/compare_aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison of AA sequences — compare_aa","text":"query focal sequence target target sequence type type comparison perform. Options 'pctId' 'similarity' subMx substitution matrix use comparison. Default BLOSUM80","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Map reads to assembly — coverage","title":"Map reads to assembly — coverage","text":"Map reads assembly","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map reads to assembly — coverage","text":"","code":"coverage(   assembly_fn = \"22030FL-06-02-140_assembly_1.fasta\",   paired_reads_1 = \"extended_1_paired.fq\",   paired_reads_2 = \"extended_2_paired.fq\",   unpaired_reads = \"unpaired.fq\",   cpus = 4,   outDir = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map reads to assembly — coverage","text":"assembly_fn Path input assembly file (fasta) paired_reads_1 path raw forward input reads (fastq) paired_reads_2 path raw reverse input reads (fastq) unpaired_reads path raw unpaired input reads (fastq) cpus Number CPUs use outDir Path output directory","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Use coverage info to trim linear assemblies — coverage_trim","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"Use coverage info trim linear assemblies","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"","code":"coverage_trim(assembly, stats)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/coverage_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"assembly DNAString object stats data frame coverage stats","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/curate_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation curation for fish mitogenomes — curate_fish_mito","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"Annotation curation fish mitogenomes","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/curate_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"","code":"curate_fish_mito(   annotations_fn = NULL,   assembly_fn = NULL,   coverage_fn = NULL,   genetic_code = 2,   out_dir = NULL,   params = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/curate_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"annotations_fn Path annotations file (csv) assembly_fn Path assembly file (fasta) coverage_fn Path coverage file (csv) genetic_code Genetic code use (default = 2) out_dir Path output directory params Nested list curation parameters. Can also provided base64 encoded json string.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_db_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Export project database to CSV — export_db_to_csv","title":"Export project database to CSV — export_db_to_csv","text":"Exports MitoPilot SQLite database CSV. File name include date time export.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_db_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export project database to CSV — export_db_to_csv","text":"","code":"export_db_to_csv(path = \".\")"},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_db_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export project database to CSV — export_db_to_csv","text":"path Path project directory (default = current working directory)","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate export NCBI files — export_files","title":"Generate export NCBI files — export_files","text":"Generate export NCBI files","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate export NCBI files — export_files","text":"","code":"export_files(   group = NULL,   IDs = NULL,   fasta_header = paste(\"{ID} [organism={Taxon}] [topology={topology}] [mgcode=2]\",     \"[location=mitochondrion] {Taxon} mitochondrion, complete genome\"),   fasta_header_gene = paste(\"{ID} [organism={Taxon}] [mgcode=2]\",     \"[location=mitochondrion] {Taxon}\"),   out_dir = NULL,   start_codons = c(\"ATG\", \"GTG\", \"ATA\", \"ATT\", \"ATC\"),   stop_codons = c(\"TAA\", \"TAG\", \"AGA\", \"AGG\", \"TA\", \"T\"),   generateAAalignments = T,   gene_export = F )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/export_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate export NCBI files — export_files","text":"group (optioanl) exportgroup names IDs One sample IDs export. provided samples export group exported fasta_header Template fot fasta headers. Uses glue syntax (.e. `...`) insert values samples table out_dir directory save exported files start_codons NCBI recognized start codons stop_codons NCBI recognized stop codons generateAAalignments Generate group-level amino acid alignments (default: TRUE) gene_export Export FASTAs feature tables individual genes? (default: FALSE)","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_assembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assembly from database — get_assembly","title":"Get assembly from database — get_assembly","text":"Get assembly database","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_assembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assembly from database — get_assembly","text":"","code":"get_assembly(ID, path, scaffold = NULL, con)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_assembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assembly from database — get_assembly","text":"ID sample ID path assembly getOrganelle path scaffold scaffold name(s) get (NULL , default) con database connection","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_top_hits_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top BLASTP hits — get_top_hits_local","title":"Get top BLASTP hits — get_top_hits_local","text":"blastp available path loaded system(), set options(\"MitoPilot.blastp\" = \"/path//blastp/executable\")","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_top_hits_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top BLASTP hits — get_top_hits_local","text":"","code":"get_top_hits_local(ref_db = NULL, query = NULL)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/get_top_hits_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top BLASTP hits — get_top_hits_local","text":"ref_db reference database query query sequeencs","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/make_PCG_alignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate HTML report woth PCG alignments — make_PCG_alignments","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"Generate HTML report woth PCG alignments","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/make_PCG_alignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"","code":"make_PCG_alignments(export_group = NULL, db = NULL, out_path = NULL)"},{"path":"https://jonahventures.github.io/MitoPilot/reference/make_PCG_alignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"export_group Name submission group db path sqlite database out_path path output files","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a new project database — new_db","title":"Initialize a new project database — new_db","text":"Initialize new project database","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a new project database — new_db","text":"","code":"new_db(   db_path = \"./.sqlite\",   mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\",   assemble_cpus = 6,   assemble_memory = 16,   seeds_db = \"/ref_dbs/getOrganelle/seeds/fish_mito.fasta\",   labels_db = \"/ref_dbs/getOrganelle/labels/fish_mito.fasta\",   getOrganelle = paste(\"-F 'anonym'\", \"-R 10 -k '21,45,65,85,105,115'\",     \"--larger-auto-ws\", \"--expected-max-size 20000\", \"--target-genome-size 16500\"),   annotate_cpus = 6,   annotate_memory = 16,   annotate_ref_db = \"Chordata\",   annotate_ref_dir = \"/ref_dbs/Mitos2\",   mitos_opts = \"--intron 0 --oril 0 --trna 0\",   trnaScan_opts = \"-M vert\",   curate_cpus = 4,   curate_memory = 8,   curate_target = \"fish_mito\",   curate_params = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a new project database — new_db","text":"db_path Path new database file mapping_fn Path mapping CSV file. Must contain columns \"ID\", \"Taxon, \"R1\", \"R2\" mapping_id Column name mapping file use primary key mapping_taxon Column name mapping file containing Taxonomic identifier (eg, species name) assemble_cpus Default # cpus assembly assemble_memory default memory (GB) assembly seeds_db Path getOrganelle seeds database labels_db Path getOrganelle labels database getOrganelle Default getOrganelle command line options annotate_cpus Default # cpus annotation annotate_memory Default memory (GB) annotation annotate_ref_db Default Mitos2 reference database annotate_ref_dir Default Mitos2 reference database directory mitos_opts Default MITOS2 command line options trnaScan_opts Default tRNAscan-SE command line options curate_cpus Default # cpus curation curate_memory Default memory (GB) curation curate_target Default target database curation curate_params Default curation parameters","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize new MitoPilot Project — new_project","title":"Initialize new MitoPilot Project — new_project","text":"Initialize new MitoPilot Project","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize new MitoPilot Project — new_project","text":"","code":"new_project(   path = \".\",   mapping_fn = NULL,   mapping_id = \"ID\",   data_path = NULL,   min_depth = 2e+06,   executor = c(\"local\", \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\"),   container = \"drleopold/mitopilot\",   config = NULL,   Rproj = TRUE,   force = FALSE,   ... )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize new MitoPilot Project — new_project","text":"path Path project directory (default = current working directory) mapping_fn Path mapping file. csv minimally includes `ID` column unique identifier sample, `Taxon` column containing taxonomic information sample, columns `R1` `R2` specifying names raw paired read inputs. May include additional columns sample metadata. mapping_id name column mapping file contains unique sample identifiers (default = \"ID\"). data_path Path directory raw data located. Can AWS s3 bucket even using AWS pipeline execution.. min_depth Minimum sequencing depth pre-processing proceed assembly (default: 2000000) executor executor use running nextflow pipeline. Must one \"local\" (default) \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\". container docker container use pipeline execution. config (optional) provide path existing custom nextflow config file. provided config file template created based specified executor. Rproj (logical) Initialize open RStudio project project directory (default = TRUE). option effect running interactively RStudio. force (logical) Force recreating existing project database config files (default = FALSE). ... Additional arguments passed default processing parameters `new_db()`","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_test_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a test project — new_test_project","title":"Initialize a test project — new_test_project","text":"function set test project fectch associated data ENA. `n` parameter can used limit number species used test project faster set .","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_test_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a test project — new_test_project","text":"","code":"new_test_project(   path = \".\",   n = Inf,   full_size = FALSE,   executor = \"local\",   container = \"drleopold/mitopilot\",   Rproj = TRUE,   force = FALSE,   ... )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/new_test_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a test project — new_test_project","text":"path path directory test project (default = currect working directory). created already exists. n many samples include test project (Default = Inf, include ) full_size (logical) Use full size test data set (default = FALSE). Setting TRUE download raw data ENA, require 10GB take time complete. default set smaller pre-filtered input files fetched MitoPilot github repo. executor executor use running nextflow pipeline. Must one \"local\" (default) \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\". container container use running pipeline. Rproj (logical) Initialize open RStudio project project directory (default = TRUE). now effect running interactively RStudio. force (logical) Force recreating existing project database config files (default = FALSE). ... Additional arguments passed `init_db()`","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/nextflow_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nextflow command to run pipline — nextflow_cmd","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"Generate Nextflow command run pipline","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/nextflow_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"","code":"nextflow_cmd(   workflow = c(\"assemble\", \"annotate\"),   path = NULL,   source = app_sys(\"nextflow\") )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/nextflow_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"workflow module update (default = c(\"assemble\", \"annotate\")) path MitoPilot project directory source Nextflow script source. default, `nextflow/` subdirectory package installation.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/params_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"Default curation validation parameters Fish Mitochondria","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/params_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"","code":"params_fish_mito(alt = list())"},{"path":"https://jonahventures.github.io/MitoPilot/reference/params_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"alt (optional) named list default values modify","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(shiny.launch.browser = T),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/update_sample_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update project database metadata. — update_sample_metadata","title":"Update project database metadata. — update_sample_metadata","text":"Update metadata existing project database. update ID, R1, R2, can add new metadata columns. Creates backup existing database prior updating.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/update_sample_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update project database metadata. — update_sample_metadata","text":"","code":"update_sample_metadata(   path = \".\",   update_mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\" )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/update_sample_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update project database metadata. — update_sample_metadata","text":"path Path project directory (default = current working directory) update_mapping_fn Path update mapping CSV file. Must contain columns \"ID\" \"Taxon\" mapping_id Column name update mapping file use primary key mapping_taxon Column name update mapping file containing Taxonomic identifier (eg, species name)","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/update_sample_seqdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update sequence files for existing project — update_sample_seqdata","title":"Update sequence files for existing project — update_sample_seqdata","text":"Update sequence data files samples existing project database. updating, user rerun samples, starting ASSEMBLE module. Creates backup existing database prior updating.","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/update_sample_seqdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update sequence files for existing project — update_sample_seqdata","text":"","code":"update_sample_seqdata(path = \".\", update_mapping_fn = NULL, mapping_id = \"ID\")"},{"path":"https://jonahventures.github.io/MitoPilot/reference/update_sample_seqdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update sequence files for existing project — update_sample_seqdata","text":"path Path project directory (default = current working directory) update_mapping_fn Path update mapping CSV file. Must contain columns \"ID\", \"R1\", \"R2\" mapping_id Column name update mapping file use primary key","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/validate_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — validate_fish_mito","title":"Title — validate_fish_mito","text":"Title","code":""},{"path":"https://jonahventures.github.io/MitoPilot/reference/validate_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — validate_fish_mito","text":"","code":"validate_fish_mito(   annotations_fn = NULL,   coverage_fn = NULL,   params = list(),   out_dir = NULL )"},{"path":"https://jonahventures.github.io/MitoPilot/reference/validate_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — validate_fish_mito","text":"annotations_fn path annotations file (csv) coverage_fn path coverage file (csv) params nested list curation/validation parameters. Can also provided base64 encoded JSON string. out_dir output directory","code":""}]
