[{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://smithsonian.github.io/MitoPilot/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"exit-status-140","dir":"Articles","previous_headings":"How do I fix the error message:","what":"“exit status (140)”?","title":"Frequently Asked Questions","text":"Nextflow log contains error looks something like : usually indicates process ran memory (RAM). Sometimes happen samples, times certain difficult samples need RAM. Try using R Shiny GUI increase requested memory process failed, rerun workflow.","code":"Caused by:   Process `WF2:ANNOTATE:annotate (SAMPLE_ID)` terminated with an error exit status (140)"},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"exit-status-127","dir":"Articles","previous_headings":"How do I fix the error message:","what":"“exit status (127)”?","title":"Frequently Asked Questions","text":"indicates MitoPilot unable find file, directory, executable. Double check paths specified creating project correct. Also make sure ’re using correct execution environment. error commonly caused using “local” executor running MitoPilot computing cluster.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"can-i-use-my-own-mitogenome-assemblies-with-mitopilot","dir":"Articles","previous_headings":"","what":"Can I use my own mitogenome assemblies with MitoPilot?","title":"Frequently Asked Questions","text":"Yes! See “Initializing Project User Assemblies” section main page.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"how-do-i-skip-processing-certain-samples","dir":"Articles","previous_headings":"","what":"How do I skip processing certain samples?","title":"Frequently Asked Questions","text":"two ways make MitoPilot skip set samples running Assembly Annotate modules. samples successfully finished steps current module, can lock . , select samples click LOCK button. Locking also make samples available next module. Alternatively, instead locking samples, can modify state. , select samples, click STATE button, choose Pre-Assembly (wait) Pre-Annotate (wait). can applied samples, regardless whether completed current module. Setting state wait can help skip samples produce unexpected errors interrupt workflow.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"where-can-i-find-complete-scripts-and-logs-for-each-process","dir":"Articles","previous_headings":"","what":"Where can I find complete scripts and logs for each process?","title":"Frequently Asked Questions","text":"MitoPilot copies important output files directory. However, scripts, logs, outfiles created Nextflow saved work directory. work directory automatically set Nextflow can difficult navigate. help , provide NF_work_dir_PROCESS-NAME.txt files sample directory. files contain path Nextflow working directory specific process sample. Note Nextflow working directories, many files hidden, including scripts log files. can list hidden files command line ls -.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"how-can-i-export-information-found-in-the-gui-tables","dir":"Articles","previous_headings":"","what":"How can I export information found in the GUI tables?","title":"Frequently Asked Questions","text":"include R function MitoPilot::export_db_to_csv. Please keep mind CSV file generated function snapshot database. go back MitoPilot make changes, need export database . Alternatively, familiar SQL, can directly pull necessary information .sqlite database located project directory.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"how-do-i-restore-annotatations-after-manual-editing","dir":"Articles","previous_headings":"","what":"How do I restore annotatations after manual editing?","title":"Frequently Asked Questions","text":"easiest way restore original annotations rerunning sample Nextflow -resume flag. quickly generate clean, unedited annotations previously completed results work directory. approach used fix mistakes made manual edits. Note rerunning sample erase manual edits notes. rerun specific samples: change state target samples “Ready Annotate” lock samples make sure Nextflow command contains -resume flag","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/FAQ.html","id":"why-does-it-take-so-long-to-edit-a-startstop-codon-position","dir":"Articles","previous_headings":"","what":"Why does it take so long to edit a start/stop codon position?","title":"Frequently Asked Questions","text":"Every time make manual edit start stop codon position, MitoPilot re-sequence alignment. may take long time many reference sequences close match target gene. speed process manual editing, included Align fewer refs checkbox. Clicking checkbox limits alignments maximum five reference sequences (automatically selecting top BLAST hits). Note re-run alignment algorithm, alignment results may change.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/Fish-Mitogenome-Curation.html","id":"reference-databases","dir":"Articles","previous_headings":"","what":"Reference Databases","title":"Fish Mitogenome Curation","text":"MitoPilot expects curation reference database files form Blastp database files, one gene. default, pipeline use database files used Mitos2 initial annotation process. can modified using ref_db property Curation Parameters (see ). default value ref_db, (ref_db = list(default = \"/ref_dbs/Mitos2/Chordata/featureProt/{gene}.fas\")), specifies location MitoPilot docker image database located, {gene} translated individual gene names processing. default database location can overridden gene-specific paths added named entires ref_db parameter, e.g. ref_db = list(default = \"/ref_dbs/Mitos2/Chordata/featureProt/{gene}.fas\", atp8 = \"/ref_dbs/curation/atp8.fas\"). However, important note paths relative execution environment must accessable environment. Building custom docker image base MitoPilot image, includeding additional reference databases within file system, one way achieve .","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/Fish-Mitogenome-Curation.html","id":"curation-parameters","dir":"Articles","previous_headings":"","what":"Curation Parameters","title":"Fish Mitogenome Curation","text":"Currently, curation parameters specified project initialization applied samples within project. default, parameters set function, params_fish_mito(). Custimization parameters can achieved directly providing complete named list, passing individual modifications params_fish_mito() function. example, default expected count trnW genes increased 2 default percent similarity “acceptable” PCG match reduced 85 initializing new project : full set default curation parameters can viewed MitoPilot GUI sample “Curation Opts”, presented. moments, values can edited individual samples within GUI, feature eventually added. Developer Note: curation parameters stored project sqlite database base64 encoded text must parsed reading / writing.","code":"new_project(   ...,   curate_params = params_fish_mito(     list(       hit_threshold = 85,       rules = list(         trnW = list(           count = 2         )       )     )   ) )"},{"path":"https://smithsonian.github.io/MitoPilot/articles/Fish-Mitogenome-Curation.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Fish Mitogenome Curation","text":"Following automated curation process, samples processed validation script, validate_fish_mito() default. script looks anomolies final annotations relative expectations specified curation parameters add notations assist manual curation using MitoPilot GUI. possible duplicate: annotation occurs assembly often expected. identical annotations receive flag user must determin () removed. exceeds max overlap: annotation overlaps one neighboring annotations strand percentage length greater value set max_operlap parameter curation params. represents global maximum overlap threshold. exceeds max start overlap: start position PCG annotation overlaps one neighboring annotations strand expected. exceeds max stop overlap: stop position PCG annotation overlaps one neighboring annotations strand expected. exceeds max length: annotation length exceed maximum expectation set curation params. min length: annotation length mimum expectation set curation params. low coverage region: 5% assembly region defined annotation less 10x coverage. high error region: 5% assembly region defined annotation raw read error rate greater 5% (ie, 5% raw reads align base show disagreement base call). internal stop codon: internal stop codon detected PCG annotation. non-standard stop codon: PCG stop codon specified curation params detected. non-standard start codon: PCG start codon specified curation params detected. low reference similarity: PCG curation reference database include references compositional similarity equal ro greater hit_threshold set curation parameters (default = 90). check reference start alignment: PCG start position align exactly majority top hits reference database. check reference stop alignment: PCG stop position align exactly majority top hits reference database.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Test Project Tutorial","text":"recommend running included test project (Illumina data 13 fish species) trying MitoPilot samples. following tutorial provides step--step walkthrough. First, make sure R (>=4.0.0) Nextflow installed. tutorial also assumes using RStudio interface R. ’re working computing cluster, recommend checking RStudio Server. provided detailed installation usage instructions Smithsonian Hydra NOAA SEDNA computing clusters. Next ’ll need install MitoPilot R package GitHub. Within RStudio, run following.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } if (!requireNamespace(\"remotes\", quietly = TRUE)) {     install.packages(\"remotes\") } BiocManager::install(\"Smithsonian/MitoPilot\")"},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"project-initialization","dir":"Articles","previous_headings":"","what":"Project Initialization","title":"Test Project Tutorial","text":"Now can initialize test project. data, use function MitoPilot::new_project. However, test data, ’ll use MitoPilot::new_test_project. Note:using execution environment currently supported, use config = config.MyEnv pass custom Nextflow config MitoPilot::new_test_project function. FEATURE CURRENTLY DEVELOPMENT. test project successfully initialized, see following.","code":"# load the package library(MitoPilot)  # specify the directory where your test project will be created # if the directory does not exist, MitoPilot will create it wd = \"/pool/public/genomics/macguigand/MitoPilot/testing/2025_04_01\"  # specify an execution environment, \"local\", \"NMNH_Hydra\", or \"NOAA_SEDNA\" ex = \"NMNH_Hydra\"  # initialize the test project MitoPilot::new_test_project(     path = wd,     executor = ex,     full_size = FALSE,     Rproj = FALSE ) Creating project directory: /pool/public/genomics/macguigand/MitoPilot/testing/2025_04_01 SRR22396794 - Psychrolutes paradoxus SRR22396940 - Psenes pellucidus SRR22396740 - Hoplostethus occidentalis SRR21844202 - Fundulus majalis SRR22396640 - Xyrichtys novacula SRR22396732 - Gephyroberyx darwinii SRR22396627 - Gigantura indica SRR21843972 - Stomias affinis SRR22396843 - Conger oceanicus SRR22396668 - Erotelis smaragdus SRR22396758 - Upeneus parvus SRR22396865 - Paraconger caudilimbatus Project initialized successfully. Please open and review the .config file to ensure all required options are specified."},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"exploring-the-mitopilot-gui","dir":"Articles","previous_headings":"","what":"Exploring the MitoPilot GUI","title":"Test Project Tutorial","text":"can now launch R Shiny Graphical User Interface (GUI) examine test project start MitoPilot analysis pipeline.  Nice! can see basic information samples. initializing project, pulled mapping CSV file. dropdown menu top left switches different MitoPilot modules: Assemble, Annotate, Export. necessary, circular arrow button top left refresh sample table.  Clicking column name sort table column.  can filter samples using search box top right. columns can also filtered using text boxes top table.  left sample ID column two icons. first icon shows whether sample locked unlocked. sample unlocked, included running current pipeline module. locked sample edited current module, made available next pipeline module. can toggle lock selecting sample (check mark), pressing LOCK top window. Multiple samples can locked unlocked simultaneously.  icon shows state sample. states vary depending analysis module automatically updated running pipeline. However, can also manually change state sample using STATE button. example, Assemble module prevent samples running pipeline manually setting states Hold / Waiting.","code":"# the function to launch the GUI must be called from within your project's directory setwd(wd) MitoPilot::MitoPilot()"},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"modifying-pipeline-parameters","dir":"Articles","previous_headings":"","what":"Modifying Pipeline Parameters","title":"Test Project Tutorial","text":"Within GUI, can modify options step current pipeline module. Click one default links Preprocess Opts column.  can see default options pre-processing raw FASTQ files. can modify clicking edit checkbox. Let’s change memory 20 GB. also change options passed fastp, ’ll keep defaults now.  can save new parameter options clicking Parameter set name box, typing new name, clicking Add NEW NAME... dropdown. Finally, click Update bottom right save selection.  ’ve saved new parameter set, can easily access using dropdown menu.  clicking Update, table now show test samples Preprocess Opts column.  can set different parameters different samples simply selecting set want change repeating process. test dataset, let’s keep everything consistent. Let’s also change Assembly Opts. Repeat process , creating new himem setting 6 CPUs 36 GB memory.  Assembly Opts window, can also modify parameters GetOrganalle, including seeds labels databases. default fish reference databases downloaded MitoPilot GitHub repository. use custom databases providing full path appropriate FASTA files local computer cluster. test project, ’ll leave GetOrganalle settings default values.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"running-the-assemble-module","dir":"Articles","previous_headings":"","what":"Running the Assemble Module","title":"Test Project Tutorial","text":"Let’s get started pipeline! Select samples, click UPDATE button. new window appear Nextflow command.  three options running pipeline. First, copy Nextflow command run terminal window. requires maintain open connection Nextflow running, may cause issues large, complex datasets. Alternatively, embed Nextflow command within batch job submission script computing cluster. allows run analyses background, preferable datasets large number samples may take several hours process. provided instructions running MitoPilot Nextflow commands batch jobs Smithsonian Hydra NOAA SEDNA computing clusters. final option Start Nextflow button, run analysis pipeline within GUI. requires keep GUI open pipeline running. Warning:Currently, Start Nextflow button compatible NOAA SEDNA computing cluster. Please use command line batch job method, making sure run mamba activate MitoPilot_deps prior calling Nextflow. Since test dataset small, let’s run Nextflow within GUI. Click Start Nextflow launch pipeline.  ’re ! see Nextflow output printed Progress window. window continually update pipeline progresses. long gears top right spinning, pipeline still running. Assemble pipeline module 3 steps: preprocessing (filtering) raw FASTQ files fastp, assembling mitogenomes using GetOrganelle, calculating coverage maps assemblies using bowtie2. ’re working computing cluster, Nextflow distributes analyses across multiple batch jobs. can allow run hundreds samples simultaneously. can use cluster’s job scheduler check status MitoPilot jobs. samples may finish faster others.  may notice samples fail certain steps (though unlikely test dataset). Often due memory error, MitoPilot retry failed samples RAM. Nextflow log tracks number failed samples retries.  test dataset take minutes finish. ’s done, Progress window look something like .  scroll bottom progress window, can find runtime statistics.  Click Close return samples table.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"inspecting-assembly-results","dir":"Articles","previous_headings":"","what":"Inspecting Assembly Results","title":"Test Project Tutorial","text":"sample table now updated new information mitogenome assemblies.  want locate results files sample, scroll way right click output. open appropriate folder Files pane RStudio session.  can also view results within MitoPilot GUI. example, select SRR21843972 (Stomias affinis), click details. open new window mitogenome sequence.  Select sequence click Fasta button bottom right. copy FASTA formatted mitogenome clipboard, can paste favorite text editor. useful quick BLAST search.  can also click view button, open summary figure new tab, including mean read depth, sequence error rate, GC content.  Notice figure, read depth drops dramatically ends sequence. SRR21843972 unable assemble circular mitogenome due poor read coverage region. assemble circular mitogenome, try running Assemble module different GetOrganelle settings (see Wiki) sequence data.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"problematic-samples","dir":"Articles","previous_headings":"","what":"Problematic Samples","title":"Test Project Tutorial","text":"test dataset, two problematic samples returned failed states. can see samples failed looking exclamation mark state icon. Selecting sample icon clicking STATE button confirm.  One failed sample SRR22396758 (Upeneus parvus). purposefully truncated data sample contain 200 reads. reads, sample failed meet min_depth threshold returned message “Insufficient sequencing depth” Notes column. analyzing data, can specify min_depth threshold new_project function. failed sample SRR21844202 (Fundulus majalis). sample plenty data able assemble mitogenome. However, message Notes columns says “Unable resolve single assembly reads.” GetOrganelle produced two alternate assembly paths sample. usually due complicated assembly graphs near repeat region. Please refer GetOrganlle paper information multiple assembly paths. Let’s take peek SRR21844202 (Fundulus majalis). Select sample, scroll way right, click details.  can see two assemblies listed . Clicking view show us coverage, error, GC content graphs assembly. Path #1  Path #2  two assembly paths differ slightly around 13,000 bp. can chose move forward just one assembly path clicking “ignore” button one assembly paths. Alternatively, can use consensus sequence. Select paths click Align button bottom right. sequence alignment pop , showing us two paths 99.9897% sequence similarity. scroll alignment, can see base pair differences.  Selecting Trim Consensus remove conflicting regions aligned assembly paths produce shorter consensus sequence alignments. automatically ignore original two assembly paths.  Click close return samples table. see # Paths column SRR21844202 highlighted note indicating assembly edited. sample also automatically changed locked state.  Warning: Carefully consider options samples multiple assembly paths. may wish align assembly reference compare depth sequencing coverage. one-size-fits-solution.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"running-the-annotate-module","dir":"Articles","previous_headings":"","what":"Running the Annotate Module","title":"Test Project Tutorial","text":"can now move Annotate pipeline module. module consists annotation step using Mitos2 tRNAscan-SE, taxon-specific curation step refine annotation models, validation step flag possible issues known errors rejected NCBI GenBank. First, need lock successful samples Assemble module. Select samples except SRR22396758 (Upeneus parvus) click LOCK button. use dropdown menu top left navigate Annotate module.  Like , let’s edit Annotate Opts increase memory allocation 60 GB. window, also edit Mitos2 tRNAscan-SE options. future, allow users specify custom reference databases annotation.  can also edit curation options. Currently, one set curation parameters: fish_mito. updated near future.  run Annotate module, select samples, click UPDATE, click Start Nextflow. take minutes. long gears top right spinning, pipeline still running.  steps complete, gears stop spinning ’ll see summary message printed bottom Progress window. Click Close return sample table.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"exploring-annotation-results","dir":"Articles","previous_headings":"","what":"Exploring Annotation Results","title":"Test Project Tutorial","text":"LOT results explore Annotate module. sample table reports basic stats number protein-coding genes (PCGs), tRNAs, rRNAs. missing column reports mitochondrial genes annotated (based provided curation model). extra column notes number potentially duplicated genes. Lastly, warnings column indicates many warning flags raised validation step. Samples many warnings require manual curation ensure rejected submission NCBI GenBank. Warning messages explained detail .  annotation results sample can examined closely clicking details button. First, let’s examine details good sample, SRR19434536 (Rhinecanthus rectangulus).  sample expected number genes warnings. However, notes column shows MitoPilot still made tweaks annotation curation step. example, start position rRNA rrnL moved 22 bp upstream stop codon NAD2 trimmed 2 bp. Nucleotide sequences (amino acid sequence PCGs) can copied clipboard using nt (aa) buttons far right. helpful ’d like manually BLAST genes. Clicking Coverage Map button show plot sequence depth, zooming position highlighted gene.  Note: Coverage Map feature work consistenly NMNH Hydra cluster. working fix. protein coding genes, can click Alignment button show protein alignment annotated gene reference database. Currently, shows top hits (filtered blast using -best_hit_score_edge 0.01) curation process, may one sequences.  default, MitoPilot uses RefSeq BLAST database. like use custom BLAST database, can check Local blast box. MitoPilot return message instructions: run options('MitoPilot.local.db' = '/path//local/blastp/db') within RStudio session. need restart MitoPilot GUI change take effect.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"editing-annotation-results","dir":"Articles","previous_headings":"","what":"Editing Annotation Results","title":"Test Project Tutorial","text":"MitoPilot offers basic functions manually edit annotation results. Let’s open alignment SRR19434536 (Rhinecanthus rectangulus) “cox1” gene. Clicking EDIT button brings options change start stop position annotation. Try clicking + button next START. take seconds, since MitoPilot redo alignments. see “cox1 (focal)” sequence start position shifted.  clearly worse alignment. Click RESET undo changes. can also delete annotations selecting clicking Delete bottom details window. Delete caution; ’s easy way add annotation back without running sample Annotate module . Linearize button convert circular assembly linear assembly. may useful D-loop region poorly assmebled annotated. can use Mark reviewed/unreviewed change state Reviewed column, may helpful tracking progress manual edits. Please note annotation editing bit temperamental may encounter bugs. Please report problems MitoPilot GitHub issues page.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"running-the-export-module","dir":"Articles","previous_headings":"","what":"Running the Export Module","title":"Test Project Tutorial","text":"Let’s move final step pipeline: Export module. module allows create groups samples, generate alignments files formatted submission GenBank. First, need lock successful samples Annotate module. Select samples click LOCK button. use dropdown menu top left navigate Export module. Next, let’s create group samples. Sort samples table clicking Taxon column, select first five samples click GROUP button. new window appear showing summary information selected samples. Type name group, click Add.., click Create. can click Close return sample table.  sample table now shows group assignment Group column.  Note: can assign new samples existing group. Simply select samples wish add, click GROUP, choose existing group dropdown menu. Note: sample can belong one group. MitoPilot produce warning message attempt re-assign sample new group. can proceed exporting data group. Click EXPORT DATA, open new window. samples added group can exported manner.  multiple groups, can select appropriate one dropdown menu. MitoPilot allows create custom FASTA header samples, pulling data columns CSV file supplied mapping_fn argument MitoPilot::new_project function. conveniently allows include metadata needed NCBI GenBank submission. reference column, use curly brackets. example organism={Taxon} autofill values “Taxon” column FASTA header. test project, can leave Fasta Header Template default value. Generate Group-level PCG alignment summary run alignments protein coding genes group. large groups, can take . ’s useful final quality control check. Let’s toggle Export individual genes button. generate additional FASTA files GenBank feature tables protein coding gene. can helpful want use individual genes phylogenetic analyses submit GenBank. gene FASTA files custom header template can modify. Click Export generate final files. may take couple minutes, long gears spinning, MitoPilot still running. complete, MitoPilot print location exported files. default, location YOUR_PROJECT_DIRECTORY//export/YOUR_GROUP_NAME.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"exploring-the-final-results","dir":"Articles","previous_headings":"","what":"Exploring the Final Results","title":"Test Project Tutorial","text":"MitoPilot produce three output files. First, .html file contains visualizations protein coding gene alignment export group. may useful quickly identify samples poor annotations need additional manual curation.  example, ATP8 annotation “SRR22396640” clearly stands compared samples export group.  Next two files need submission NCBI GenBank. .fasta file contains mitogenome assemblies sample, following header template specified exporting data. MitoPilot attempts adjust start position every assembly start trnF gene.  Additionally .tbl file, standardized 5-column, tab-delimited feature table containing information annotated genes mitogenome.  real dataset, use two files submission NCBI GenBank. export directory also contains sub-directory GFFs annotations sample GFF3 format. GFF files can loaded tools like Geneious additional manual inspection prior submission.  Lastly, selected Export individual genes option, another directory genes containing sub-directories every protein coding gene. find FASTA files feature tables corresponding gene. also concatenated FASTA file feature table containing protein coding genes, named GROUP_PCGs.fasta/tbl.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/MitoPilot.html","id":"wrap-up","dir":"Articles","previous_headings":"","what":"Wrap-up","title":"Test Project Tutorial","text":"Congratulations, ’ve reached end test project tutorial! Hopefully now solid understanding MitoPilot interface can begin analyze explore mitogenome datasets.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"how-to-use-mitopilot-on-the-smithsonian-hydra-computing-cluster","dir":"Articles","previous_headings":"","what":"How to use MitoPilot on the Smithsonian Hydra computing cluster","title":"NMNH Hydra Setup","text":"need account access Hyrda computing cluster. Instructions available .","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"first-time-setup","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"First time setup","title":"NMNH Hydra Setup","text":"Dan MacGuigan submitted request Hydra team installation Nextflow module. now, need install copy Nextflow cluster. Login Hydra run following. now executable nextflow file home directory. move location PATH. example: allow call nextflow anywhere cluster. Note: must load Hydra Java module (module load tools/java/21.0.2) whenever wish use Nextflow.","code":"# Nextflow installation instructions # from https://www.nextflow.io/docs/latest/install.html cd ~ module load tools/java/21.0.2 curl -s https://get.nextflow.io | bash # install Nextflow chmod +x nextflow # make Nextflow executable mkdir ~/bin # create bin directory, if needed mv ~/nextflow ~/bin/nextflow # move nextflow to bin directory echo 'export PATH=\"${HOME}/bin:${PATH}\"' >> ~/.bashrc # add bin directory to PATH, in case it's not already there source ~/.bashrc"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"launching-rstudio-server","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Launching RStudio server","title":"NMNH Hydra Setup","text":"use RStudio server run MitoPilot. RStudio server functions much like RStudio local computer, using Hydra cluster’s data storage computational resources. two ways access RStudio server Hydra.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"tunneling-to-a-rstudio-server-session","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster > Launching RStudio server","what":"Tunneling to a RStudio server session","title":"NMNH Hydra Setup","text":"recommend always using interactive session tunneling RStudio server. avoids unnecessary computational burden login nodes. launch interactive session, run following. Note: must include -pe mthread 2 order enough available RAM building MitoPilot Singularity image. Note: Interactive sessions Hydra can run maximum 24 hours. Additionally, users limited one active interactive session time. interactive session started, launch RStudio server. Note: first time launching RStudio server, may asked run different command. see something like printed screen. Note: get message saying “ERROR system error 98 (Address already use)”, someone else tunnel established default port (8787). fix , try using different port, e.g. start-rstudio-server -port 8890. port number 1025-65535 allowed. Leave cluster terminal window open, open new terminal window local computer, run ssh command printed start-rstudio-server. Enter Hydra password prompted. nothing happens, means successfully established SSH tunnel can connect RStudio server. Leaving terminal windows open, enter http://localhost:YOUR_PORT_NUMBER web browser. recommend using Chrome Firefox. known issues running MitoPilot Safari. Enter cluster login credentials access RStudio server. open full RStudio session browser. R commands run RStudio window execute cluster.","code":"qrsh -l h_rt=24:00:00 -pe mthread 2 # avoid package conflicts (may not be necessary for all users) conda deactivate  # load the RStudio server module module load tools/R/RStudio/server # launch RStudio server start-rstudio-server start-rstudio-server: starting RStudio server on host=login02 and port=8787   you need to create a ssh tunnel on your local machine with     ssh -N -L 8787:login02:8787 macguigand@hydra-login01.si.edu  Point your browser to http://localhost:8787 on your local machine. Use Control+C in this window to kill the server when done.  TTY detected. Printing informational message about logging configuration. Logging configuration loaded from '/etc/rstudio/logging.conf'. Logging to '/home/macguigand/.local/share/rstudio/log/rserver.log'. ssh -N -L 8787:login02:8787 macguigand@hydra-login01.si.edu"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"rstudio-galaxy-server","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster > Launching RStudio server","what":"RStudio Galaxy server","title":"NMNH Hydra Setup","text":"Hydra Team recently launched new interactive R Studio environment accessible directly via browser, https://galaxy.si.edu/R4. Hydra users can leverage server test, debug, develop R based workflows using interactive R Studio GUI (currently running R 4.4.3). logging Hydra account credentials, users access storage /pool, /scratch /store. server offers resources totaling 192 CPUs 1.5 T RAM. Notes: shared resource used accordingly. Long running jobs jobs requiring entire resources server appropriate job submission. server accessible trusted computers, public internet. technical reasons, access resource via telework.si.edu, go https://galaxy.si.edu choose “R4 v443” option. new resource - please patient test offering user community. evaluate test Hydra moved new datacenter decide whether kept altered way.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"installing-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Installing MitoPilot","title":"NMNH Hydra Setup","text":"install MitoPilot, use RStudio server window run following. might take . installation successful, ’re ready start using MitoPilot!","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\")   install.packages(\"remotes\") } BiocManager::install(\"Smithsonian/MitoPilot\")"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"updating-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Updating MitoPilot","title":"NMNH Hydra Setup","text":"need update MitoPilot, simply run BiocManager installation command . like ensure ’re using latest MitoPilot version, run remove.packages(\"MitoPilot\") prior installation. updating MitoPilot, recommend restarting R (RStudio, Session > Restart R run .rs.restartR()) reloading package library(MitoPilot). also recommend clearing Singularity cache singularity cache clean ensure using latest MitoPilot Singularity image.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"launching-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Launching MitoPilot","title":"NMNH Hydra Setup","text":"load MitoPilot R package, run library(MitoPilot) within RStudio server session. can now utilize MitoPilot’s functions, initializing project opening R Shiny GUI. Want learn use MitoPilot? Check Test Project Tutorial.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"running-large-mitopilot-jobs","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Running Large MitoPilot Jobs","title":"NMNH Hydra Setup","text":"large number samples process (dozen), recommend running assemble annotate MitoPilot modules batch jobs. Running modules within R Shiny GUI requires maintain open connection cluster. may issues restarting connection breaks Nextflow running. Instead, can “fire forget” submitting batch jobs. First, initialize new project modify desired parameters using GUI. ready, click UPDATE. new window appear.  Rather clicking Start Nextflow button, copy Nextflow command create submission script. provided template . may wish modify job name (-N) log file name (-o). Note: must use options -q lTWFM.sq -l wfmq. special Hydra queue workflow managers like Nextflow. must also include -pe mthread 2 order enough available RAM building MitoPilot Singularity image. Move submission script MitoPilot run directory (example, /pool/public/genomics/macguigand/MitoPilot/22030FL-06-02/run_02/). submit job using qsub MY_SCRIPT_NAME.sh. can monitor progress job using qstat command checking log files. job done, can relaunch GUI inspect results. approach can used annotate module.","code":"#!/bin/sh #$ -N MitoPilot_assembly # MODIFY THIS IF DESIRED #$ -o MitoPilot_assembly.log # MODIFY THIS IF DESIRED #$ -cwd -j y #$ -q lTWFM.sq #$ -l wfmq #$ -pe mthread 2 #$ -S /bin/sh  echo + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME  source ~/.bashrc  module load tools/java/21.0.2 # required for Nextflow on Hydra  # NEXTFLOW COMMAND, example below nextflow -log /pool/public/genomics/macguigand/MitoPilot/22030FL-06-02/run_02/.logs/nextflow.log run /home/macguigand/R/x86_64-pc-linux-gnu-library/4.4/MitoPilot/nextflow -c /pool/public/genomics/macguigand/MitoPilot/22030FL-06-02/run_02/.config -entry WF1  echo = `date` job $JOB_NAME done"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NMNH-Hydra.html","id":"known-issues","dir":"Articles","previous_headings":"How to use MitoPilot on the Smithsonian Hydra computing cluster","what":"Known Issues","title":"NMNH Hydra Setup","text":"launching RStudio server receive error message [rserver] ERROR system error 98 (Address already use);, TCP port already use another user. Specify different port range 1025-65535 starting server. E.g., start-studio-server -port 8890.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"how-to-use-mitopilot-on-the-noaa-nmfs-senda-computing-cluster","dir":"Articles","previous_headings":"","what":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","title":"NOAA SEDNA Setup","text":"need account access SEDNA computing cluster. Detailed instructions can found . contact Krista Nichols (krista.nichols@noaa.gov) information.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"first-time-setup","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"First time setup","title":"NOAA SEDNA Setup","text":"first time setup, need create Mamba environment MitoPilot dependencies Nextflow Singularity. also include version R environment; issues installing pipeline cluster’s R module. Log NOAA NMFS VPN, log SEDNA. ’ve never used mamba SEDNA , run following. Let’s create MitoPilot_deps mamba environment. may take . can now call nextflow singularity anywhere cluster, long MitoPilot_deps environment activated.","code":"/opt/bioinformatics/mambaforge/bin/mamba init mamba create --name MitoPilot_deps bioconda::nextflow conda-forge::singularity conda-forge::zlib conda-forge::r-base -y"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"installing-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Installing MitoPilot","title":"NOAA SEDNA Setup","text":"Time install MitoPilot! Activate new mamba environment launch R. new R session, run following install MitoPilot. take install necessary dependencies. install successful, can exit R session using quit().","code":"# activate the mamba environment you just created mamba activate MitoPilot_deps  # launch R R if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\")   install.packages(\"remotes\") } BiocManager::install(\"Smithsonian/MitoPilot\")"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"updating-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Updating MitoPilot","title":"NOAA SEDNA Setup","text":"need update MitoPilot, simply run BiocManager installation command . like ensure ’re using latest MitoPilot version, run remove.packages(\"MitoPilot\") prior installation. updating MitoPilot, recommend restarting R (RStudio, Session > Restart R run .rs.restartR()) reloading package library(MitoPilot). also recommend clearing Singularity cache singularity cache clean ensure using latest MitoPilot Singularity image.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"setting-up-rstudio-server","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Setting up RStudio server","title":"NOAA SEDNA Setup","text":"Next need set RStudio server. version Rstudio server must match R version MitoPilot_deps mamba environment. able see R version running mamba activate MitoPilot_deps;mamba list. SEDNA terminal, run following. may take minutes download set Singularity image file. Now let’s make helper script launch RStudio server. , make sure ’re setting Rstudio_version correctly.","code":"# Make a directory to host R-studio.  mkdir -p ~/rstudio cd ~/rstudio  # activate cluster's singularity environment mamba activate singularity-3.8.6  # Pull R studio from singularity # change version number if needed singularity pull docker://rocker/rstudio:4.4.2  # additional setup mkdir -p run var-lib-rstudio-server printf 'provider=sqlite\\ndirectory=/var/lib/rstudio-server\\n' > database.conf # set up bin directory if it doesn't exist mkdir ~/bin   # create helper script cat > ~/bin/start-rstudio-server-MitoPilot <<'EOL' #!/bin/bash # script to start Rstudio server  # and print instructions on how to connect  # modify to match your Rstudio server version Rstudio_version=\"4.4.2\"  cd ~/rstudio source ~/.bashrc  mamba activate MitoPilot_deps  # Assign yourself a port PORT=$(shuf -i 8000-9000 -n 1)  HOST=$( hostname )  GREEN='\\033[0;32m' # green ANSI RED='\\033[0;31m' # red ANSI NC='\\033[0m' # no color ANSI  echo \"\" echo -e \"${GREEN}TO ACCESS RSTUDIO SERVER${NC}\" echo \"In a terminal on your local system, run the following command:\" echo \"ssh -N -L 8787:${HOST}:${PORT} ${USER}@sedna.nwfsc2.noaa.gov\" echo \"\" echo \"Enter your password when prompted\" echo \"If successful, nothing will happen\" echo \"Then open http://localhost:8787 on a local web browser\" echo \"\"  echo -e \"${RED}NOTE:${NC} This window and your local terminal session\" echo \"must remain open in order to access the Rstudio server\" echo \"\"  mamba activate   # set Singularity temp dir, if needed # if not set, Singularity will write to /tmp on the compute nodes #mkdir -p \"${HOME}/.singularity/temp\" #export SINGULARITY_TMPDIR=\"${HOME}/.singularity/temp\"  singularity exec \\  --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,${HOME}/.conda/envs/MitoPilot_deps/bin,${HOME}/.conda/envs/MitoPilot_deps/lib \\  --env APPEND_PATH=\"${HOME}/.conda/envs/MitoPilot_deps/bin:${HOME}/.conda/envs/MitoPilot_deps/lib\" \\  rstudio_${Rstudio_version}.sif \\  rserver --www-address=0.0.0.0 --www-port=${PORT} --server-user=${USER} EOL  # make script executable chmod 755 ~/bin/start-rstudio-server-MitoPilot"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"launching-rstudio-server","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Launching RStudio server","title":"NOAA SEDNA Setup","text":"launch RStudio server, first start interactive session SENDA. won’t need much computing resources, since MitoPilot uses Nextflow distribute analyses. run following. Follow instructions access RStudio server session. look something like .","code":"srun -c 2 --mem=16GB -p standard --pty /bin/bash mamba activate MitoPilot_deps start-rstudio-server-MitoPilot TO ACCESS RSTUDIO SERVER In a terminal on your local system, run the following command: ssh -N -L 8787:node01.cluster:8377 dmacguigan@sedna.nwfsc2.noaa.gov  Enter your password when prompted If successful, nothing will happen Then open http://localhost:8787 on a local web browser  NOTE: This window and your local terminal session must remain open in order to access the Rstudio server"},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"launching-mitopilot","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Launching MitoPilot","title":"NOAA SEDNA Setup","text":"opened RStudio server session, run library(MitoPilot) load package. see message Nextflow successful. Want learn use MitoPilot? Check Test Project Tutorial.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/NOAA-SEDNA.html","id":"running-large-mitopilot-jobs","dir":"Articles","previous_headings":"How to use MitoPilot on the NOAA NMFS SENDA computing cluster","what":"Running Large MitoPilot Jobs","title":"NOAA SEDNA Setup","text":"SEDNA currently support running Nextflow within R Shiny GUI. small number samples, run Nextflow interactive session. However, requires maintain open connection cluster. large datasets, may issues restarting connection breaks Nextflow running. Therefore, large number samples process (dozen), recommend running assemble annotate MitoPilot modules batch jobs. First, initialize new project modify desired parameters using GUI. ready, click UPDATE. new window appear.  Rather clicking Start Nextflow button, copy Nextflow command create submission script. provided template . may wish modify job name (--job-name) output file names (--output --error). Move submission script MitoPilot run directory (example, /home/dmacguigan/MitoPilot/test/2025_1_2/). submit job using sbatch MY_SCRIPT_NAME.sh. can monitor progress job using squeue command checking log files. job done, can relaunch GUI inspect results. approach can used annotate module.","code":"#!/bin/bash #SBATCH --job-name=MitoPilot_assembly # MODIFY THIS IF DESIRED #SBATCH --output=MitoPilot_assembly.out # MODIFY THIS IF DESIRED #SBATCH --error=MitoPilot_assembly.err # MODIFY THIS IF DESIRED #SBATCH -p standard #SBATCH -c 1 #SBATCH --mem=8G #SBATCH -t 24:00:00  echo + `date` job $SLURM_JOB_NAME started in $SLURM_JOB_PARTITION with jobID=$SLURM_JOBID on $SLURM_JOB_NODELIST  source ~/.bashrc mamba activate MitoPilot_deps  # MITOPILOT NEXTFLOW COMMAND, example below nextflow -log /home/dmacguigan/MitoPilot/test/2025_1_2/.logs/nextflow.log run /home/dmacguigan/.conda/envs/MitoPilot_deps/lib/R/library/MitoPilot/nextflow -c /home/dmacguigan/MitoPilot/test/2025_1_2/.config -entry WF1  echo = `date` job $SLURM_JOB_NAME done"},{"path":"https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html","id":"why-use-a-custom-reference-database","dir":"Articles","previous_headings":"","what":"Why use a custom reference database?","title":"Building Custom Databases","text":"Currently, MitoPilot comes packaged reference databases fishes. working taxonomic group, need compile databases mitochondrial sequences clade.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html","id":"what-parts-of-the-mitopilot-pipeline-use-reference-databases","dir":"Articles","previous_headings":"","what":"What parts of the MitoPilot pipeline use reference databases?","title":"Building Custom Databases","text":"GetOrganelle MitoFinder (Assemble module) Mitos2 (Assemble module) BLAST (Assemble Export modules)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html","id":"build-custom-databases-for-getorganelle","dir":"Articles","previous_headings":"","what":"Build custom databases for GetOrganelle","title":"Building Custom Databases","text":"proceeding, consider reviewing GetOrganelle paper documentation better understand required database architecture. GetOrganelle uses two databases, FASTA format: “seed” database containing complete (partial) mitochondrial genomes “label” database containing individual mitochondrial gene sequences many different ways build GetOrganelle databases. provided following script assist process.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html","id":"genbankdownloadutil-sh","dir":"Articles","previous_headings":"Build custom databases for GetOrganelle","what":"GenBankDownloadUtil.sh","title":"Building Custom Databases","text":"script perform GenBank query mitochondrial records matching search criteria, download sequences, sort GetOrganlle “seed” “label” databases. proceeding, need following dependencies: Entrez Direct tools (tested v22.8) python (tested v3.12.2) biopython (tested v1.84) working NMNH Hydra cluster, python biopython available module. Simply run module load bio/biopython/1.83. Download GenBankDownloadUtil.sh script directory want create custom databases. also need download parseGB.py directory. run script, need construct advanced GenBank query. example, want download starfish mitochondrial sequences, use '\"Asteroidea\"[Organism]'. script can take multiple search terms. example, use '\"Percidae\"[Organism] \"PRJNA720393\"[BioProject]' download percid mitochondrial sequences specific BioProject. Run script follows, providing custom search terms. Make sure full query single quotes, search term double quotes, query type square brackets. bash GenBankDownloadUtil.sh '\"query\"[QueryType]' may take depending many GenBank records match search terms. working computing cluster, recommend running script batch job. example submission script NMNH Hydra cluster. Note: submission script assumes Entrez Direct tools PATH (.e. tools can run directory). script produce several files: genbank.gb - GenBank file containing matching records multigene.fasta - FASTA file sequences contained multiple gene records, indicating either partial complete mitogenome multigene.dedup.fasta - multigene.fasta, duplicate sequences removed nogene.fasta - FASTA file mitochondrial sequences annotated genes nogene.dedup.fasta - nogene.fasta, duplicate sequences removed singlegene.fasta - FASTA file mitochondrial gene sequences singlegene.dedup.fasta - singlelocus.fasta, duplicate sequences removed GetOrganelle: seed database = multigene.dedup.fasta (plus maybe sequences nogene.dedup.fasta) label database = singlegene.dedup.fasta nogene.fasta file contains un-annotated mitochondrial sequences mitochondrial sequences non-gene region, D-loop. Consider manually inspecting sequences. may wish include custom GetOrganelle seed database.","code":"# /bin/sh # ----------------Parameters---------------------- # #$ -S /bin/sh #$ -pe mthread 8 #$ -q sThM.q #$ -l mres=640G,h_data=80G,h_vmem=80G,himem #$ -cwd #$ -j y #$ -N customGetOrgDBs #$ -o customGetOrgDBs.log  # script to generate custom seed and label DBs for starfish  # load python and biopython module module load bio/biopython/1.83 # need python and biopython too  # run the script bash GenBankDownloadUtil.sh '\"Asteroidea\"[Organism]'"},{"path":"https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html","id":"inspecting-custom-databases","dir":"Articles","previous_headings":"Build custom databases for GetOrganelle","what":"Inspecting custom databases","title":"Building Custom Databases","text":"helpful one-liners inspect manipulate FASTA files. Count number sequences FASTA file: Generate list FASTA headers: Generate list unique gene names: Calculate sequence lengths: Extract specific sequences FASTA file seqkit: Remove sequences FASTA file seqkit: Note: GenBankDownloadUtil.sh rename sequence GenBank “product” (protein, tRNA, rRNA) “no_product ACCESSION”. may wish remove sequences, often represent poorly annotated genes.","code":"grep -c \">\" singlelocus.dedup.fasta grep \">\" singlelocus.dedup.fasta grep \">\" singlelocus.dedup.fasta | cut -f1 -d\" \" | sort | uniq cat my_file.fasta | awk '$0 ~ \">\" {if (NR > 1) {print c;} c=0;printf substr($0,2,100) \"\\t\"; } $0 !~ \">\" {c+=length($0);} END { print c; }' # Extract sequences based on names.txt # names.txt should contain full sequences headers, one per line, but no \">\" at start module load bio/seqkit/2.8.1 # ONLY FOR NMNH HYDRA CLUSTER seqkit grep -f -n names.txt file.fasta > file_subset.fasta # Remove sequences based on name patterns listed in names.txt # one pattern per line module load bio/seqkit/2.8.1 # ONLY FOR NMNH HYDRA CLUSTER seqkit grep -v -f names.txt file.fasta > file_subset.fasta"},{"path":"https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html","id":"adding-your-own-sequences-to-a-custom-database","dir":"Articles","previous_headings":"Build custom databases for GetOrganelle","what":"Adding your own sequences to a custom database","title":"Building Custom Databases","text":"use unpublished mitogenomes custom GetOrganelle seed database, need combine multiple FASTA files. GetOrganelle require specific format sequence names seed database. can easily combine FASTA files Linux cat command: also add unpublished individual gene sequences custom GetOrganelle label database similar manner.","code":"cat multigene.dedup.fasta my_mitogenomes.fasta more_mitogenomes.fasta > final_seed_db.fasta"},{"path":"https://smithsonian.github.io/MitoPilot/articles/custom_dbs.html","id":"build-custom-databases-for-mitofinder","dir":"Articles","previous_headings":"","what":"Build custom databases for MitoFinder","title":"Building Custom Databases","text":"MitoFinder documentation instructions build reference database. Simply put, need GenBank formatted file (.gb) containing annotated mitogenomes. file can downloaded GenBank query web browser. can provide path MitoFinder database mitofinder_db argument MitoPilot::new_project function initializing project. Alternatively, can specify MitoFinder database assembly options section MitoPilot GUI. Assembly contigs MitoFinder completely de novo. MitoFinder reference database used “label” putative mitochondrial contigs. Thus, species reference database can fairly distant relatives samples.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Devin Leopold. Author, maintainer. Dan MacGuigan. Author.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leopold D, MacGuigan D (2025). MitoPilot: Mitogenome assembly, annotation, curation. R package version 1.2.2, https://github.com/Smithsonian/MitoPilot.","code":"@Manual{,   title = {MitoPilot: Mitogenome assembly, annotation, and curation},   author = {Devin Leopold and Dan MacGuigan},   year = {2025},   note = {R package version 1.2.2},   url = {https://github.com/Smithsonian/MitoPilot}, }"},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"overview","dir":"","previous_headings":"","what":"Mitogenome assembly, annotation, and curation","title":"Mitogenome assembly, annotation, and curation","text":"Please see documentation site details. MitoPilot package assembly annotation mitochondrial genomess genome skimming data. core application consists Nextflow pipeline wrapped R package, includes R-Shiny graphical interface monitor interact processing parameters outputs. Currently pipeline expects paired-end Illumina reads raw input performs following steps: fastp quality control adapter trimming GetOrganelle (default) MitoFinder mitogenome assembly bowtie2 read mapping calculate coverage error rates. MITOS2 rRNA, PCG, tRNA annotation tRNAscan-SE tRNA annotation Custom scripts gene boundary refinement annotation file formatting Validation flag possible issues known errors rejected NCBI GenBank Manual curation annotations using integrated Shiny App. Custom scripts export data format suitable submission NCBI GenBank","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"taxonomic-scope","dir":"","previous_headings":"","what":"Taxonomic Scope","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot initially built fish mitogenome assembly. default, MitoPilot uses included GetOrganelle MitoFinder fish reference databases. However, MitoPilot developed modularity extensibility mind facilitate broader application future. MitoPilot allows user provide custom reference databases assembly GetOrganelle MitoFinder. provided documentation help build custom reference database. annotation MITOS2, provided reference databases chordates metazoans. can toggle databases Annotate Opts. window MitoPilot GUI. add annotation reference database options future. Currently, MitoPilot curation/validation rulesets following groups organisms: fishes starfish (testing progress) dipterans (testing progress) mammals (testing progress) custom logic annotation curation validation scripts needs tweaked optimal performance taxonomic groups. curation rulesets contained underlying Docker image (currently hosted macguigand/MitoPilot), customization extension involve updating Docker image appropriately specifying new image Nextflow configuration file (see ). Dockerfile included repository custom local Docker Image can generated modifying Dockerfile needed running ./docker/deploy-local.sh latest repository root directory. group organisms like try MitoPilot, feel free post issue reach Dan MacGuigan directly daniel.macguigan@noaa.gov.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Mitogenome assembly, annotation, and curation","text":"provide detailed installation instructions following computing clusters: Smithsonian NMNH Hydra NOAA SEDNA use MitoPilot, need R (>=4.4.0) Nextflow. addition, depending Nextflow executing pipeline (e.g., locally remote cluster), may also need install Docker Singularity. R Nextflow installed, install MitoPilot R GitHub: Alternatively, can clone repository install package locally project folder:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"Smithsonian/MitoPilot\") devtools::install()"},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot includes set pre-filtered test data, function setting example project (new_test_project()), detailed tutorial documentation. highly recommended use test project ensure successful installation familiarize pipeline starting MitoPilot project data.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"initializing-a-project","dir":"","previous_headings":"","what":"Initializing A Project","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot workflow begins initializing new project new_project() function. running within RStudio (recommended) new R-project also initialized opened new RStudio session. path specifies new project directory created. path provided, project created current working directory. ID (unique identifier sample) R1 R2 (specifying forward reverse file names raw Illumina paired end data) Taxon (e.g. species genus name, required format) addition required columns, sample metadata can included mapping file. columns can also used exporting files NCBI GenBank Submissions, metadata important submission (e.g., BioSample ID) can included . Full path data directory, contain raw Illumina paired-end reads specified mapping file. executor specifies computational work performed Nextflow. example choosing local run pipeline local machine, awsbatch run pipeline AWS Batch. Running new_project() generate executor-specific .config file project directory must edited specify additional parameters pipeline run. NOTE: running MitoPilot via RStudio Server computing cluster, likely need specify Rproj = FALSE calling MitoPilot::new_project function.","code":"MitoPilot::new_project(   path = \"path/to/project\",   mapping_fn = \"path/to/mapping_file.csv\",   data_path = \"path/to/raw_data\",   executor = \"local\" )"},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"initializing-a-project-with-user-assemblies","dir":"","previous_headings":"Initializing A Project","what":"Initializing a Project with User Assemblies","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot can also initialize project user-supplied mitogenome assemblies. may helpful existing assemblies wish utilize annotation curation features MitoPilot. Alternatively, use approach “re-import” assemblies produced MitoPilot required manual editing external tool. use mitogenome assemblies, need mapping file two additional columns: Contains names mitogenome FASTA files. Ideally, FASTA file contain single contig scaffold representing complete mitogenome. format FASTA file names sequence headers matter. Indicate whether assembly “linear” “circular”. mitogenome FASTA files must located single directory, supply assembly_path argument new_project_userAsmb() function. Note samples MitoPilot project created new_project_userAsmb() must user-supplied assemblies. MitoPilot project mixed samples (.e. assembled, unassembled).","code":"MitoPilot::new_project_userAsmb(   path = \"path/to/project\",   mapping_fn = \"path/to/mapping_file.csv\",   data_path = \"path/to/raw_data\",   assembly_path = \"path/to/mitogenome/assembly/fasta/files\"   executor = \"local\" )"},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"nextflow-configuration-file","dir":"","previous_headings":"Initializing A Project","what":"Nextflow Configuration File","title":"Mitogenome assembly, annotation, and curation","text":"Initializing new project populate .config file project directory may include place holders important parameters, format: <<PARAMETER_NAME>>. example, new configuration files include line rawDir = '<<RAW_DIR>>', updated rawDir = '/path///data' indicating location raw data file specified mapping file. configuration files can also modified specify custom docker images one processing steps. initializing new project review .config file ensure necessary parameters provided.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"database-creation","dir":"","previous_headings":"Initializing A Project","what":"Database Creation","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot makes use Nextflow plugin nf-sqldb store retrieve processing parameters information samples processing status. database (.sqlite) created automatically project initialized stored project directory. interactive MitoPilot GUI also interacts database allow run pipeline, modify parameters, view results. initializing new project, default processing parameters pipeline modules stored database, processing parameters can also passed new_project() function modify initial defaults. example, following options modify allocated memory GetOrganelle command line options : complete list available parameters can set project initialization, see new_db() function documentation. Although MitoPilot GUI provides interface database, troubleshooting often helpful directly explore contents project’s .sqlite database. can easily done R using dplyr extension, {dbplyr}, used extensively MitoPilot package, along {DBI}, database interactions. Alternatively, many interactive tools exist specifically working SQLite databases, DB Browser SQLite.","code":"MitoPilot::new_project(   mapping = \"path/to/mapping_file.csv\",   executor = \"local\",   assemble_memory = 24,   getOrganelle = \"-F 'anonym' -R 20 -k '21,45,65,85,105,115' -J 1 -M 1 --expected-max-size 20000 --target-genome-size 16500\" )"},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"database-modification","dir":"","previous_headings":"Initializing A Project","what":"Database Modification","title":"Mitogenome assembly, annotation, and curation","text":"MitoPilot databases can modified using R helper functions update_sample_metadata(), update_sample_seqdata(), add_samples(). must close existing connections (e.g. MitoPilot GUI) prior modifying database. functions automatically create backups database case need revert changes. information, please see manual pages functions.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"running-the-pipeline","dir":"","previous_headings":"","what":"Running The Pipeline","title":"Mitogenome assembly, annotation, and curation","text":"project initialized, pipeline status can viewed using MitoPilot GUI. GUI can launched running MitoPilot() command R console project directory. GUI open new browser window primarily comprised interactive table, 3 modules (Assembly, Annotate, Export), row represents sample project. Please note tested MitoPilot GUI Chrome Firefox web browsers. known bugs running GUI Safari.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"sample-status","dir":"","previous_headings":"","what":"Sample Status","title":"Mitogenome assembly, annotation, and curation","text":"Assemble Annotate modules icon start row indicates sample status, : (⏳) Hold / Waiting = Indicates sample ready updated, updated next time pipeline run. (🏃) Ready Run = Indicates sample updated next time pipeline run. (✅) Completed Successfully = Indicates sample successfully processed. (⚠️) Completed Warning - Processing complete may failed needs manual review. additional icon indicating whether samples locked () unlocked (). locked sample protected updates Nextflow. Locking sample also make available next MitoPilot module - sample must locked Assemble module proceed Annotation must locked Annotation modules proceed data Export. “state” “locked” status one samples can modified selecting sample rows table using “STATE” “LOCK” buttons top interface.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"processing-parameters","dir":"","previous_headings":"","what":"Processing parameters","title":"Mitogenome assembly, annotation, and curation","text":"Assemble Annotate modules, processing parameters one samples can modified clicking link relevant column (e.g., Assemble Opts.). open popup can used modify options either selecting existing option set drop-menu, entering new name option set modifying parameters. multiple rows selected table options popup triggered, changes apply selected samples (though selecting locked sample prevent action). existing options set can also modified checking “editing” box popup, may trigger warning edits affect samples currently selected (.e., sample using options set).","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"running-nextflow","dir":"","previous_headings":"","what":"Running Nextflow","title":"Mitogenome assembly, annotation, and curation","text":"one samples “Ready Run” state, Nextflow pipeline can run clicking “UPDATE” button top interface. open popup Start Nextflow button can pressed output pipeline can viewed track progress. Alternatively, Nextflow command displayed popup can copied run terminal project directory, can useful like specify additional command line options override input parameters. can paste Nextflow command job submission script computing cluster. provided examples NMNH Hydra NOAA SEDNA clusters.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/index.html","id":"development-notes","dir":"","previous_headings":"","what":"Development Notes","title":"Mitogenome assembly, annotation, and curation","text":"package uses {renv} package management. cloning repository, run renv::restore() install necessary packages. work package repository, reference MitoPilot project different directory, set MitoPilot.db option location .sqlite database project (e.g. options(\"MitoPilot.db\" = \"~/Jonah/MitoPilot-testing/.sqlite\")). modifying underlying R-package functions references Nextflow pipeline, modifying / adding reference databases specified docker/Dockerfile, docker image rebuilt. docker/deploy-local.sh script can used build local image, docker/deploy-aws.sh docker/deploy-dockerhub.sh scripts can modified deploy remote image account. case, Nextflow .config file modified one processing steps reference new image.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/MitoPilot.html","id":null,"dir":"Reference","previous_headings":"","what":"Open The MitoPilot GUI — MitoPilot","title":"Open The MitoPilot GUI — MitoPilot","text":"Open MitoPilot GUI","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/MitoPilot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open The MitoPilot GUI — MitoPilot","text":"","code":"MitoPilot()"},{"path":"https://smithsonian.github.io/MitoPilot/reference/add_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Add samples to project database — add_samples","title":"Add samples to project database — add_samples","text":"Add new samples existing project database. samples inherit default processing options. Creates backup existing database prior updating.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/add_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add samples to project database — add_samples","text":"","code":"add_samples(   path = \".\",   update_mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\" )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/add_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add samples to project database — add_samples","text":"path Path project directory (default = current working directory) update_mapping_fn Path update mapping CSV file. Must contain columns \"ID\", \"Taxon, \"R1\", \"R2\" mapping_id Column name update mapping file use primary key mapping_taxon Column name update mapping file containing Taxonomic identifier (eg, species name)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Mitogenome Annotation Wrapper — annotate","title":"Mitogenome Annotation Wrapper — annotate","text":"Uses Mitos2 tRNAscan-SE annotate mitogenome assembly.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mitogenome Annotation Wrapper — annotate","text":"","code":"annotate(   assembly_fn = NULL,   coverage_fn = NULL,   cpus = 4,   genetic_code = \"2\",   ref_db = \"Chordata\",   ref_dir = \"/home/harpua/Jzonah/MitoPilot/ref_dbs/Mitos2\",   mitos_opts = \"--intron 0 --oril 0\",   mitos_condaenv = \"mitos\",   trnaScan_opts = \"-M vert\",   trnaScan_condaenv = \"base\",   start_gene = \"trnF\",   out_dir = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mitogenome Annotation Wrapper — annotate","text":"assembly_fn Path mitogenome assembly FASTA file. coverage_fn Path mitogenome assembly coverage stats CSV file. cpus Number CPUs use. genetic_code Genetic code use annotation (default: 2). ref_db Reference Mitos2 database use annotation (default: \"Chordata\"). ref_dir Path Mitos2 reference database. mitos_opts Additional command line options MITOS2. mitos_condaenv Conda environment run MITOS2 (default: \"mitos\"). trnaScan_opts Additional command line options tRNAscan-SE. trnaScan_condaenv Conda environment run tRNAscan-SE (default: \"base\"). start_gene name gene (PCG, rRNA, tRNA) start circular assembly (default = \"trnF\") out_dir Output directory.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate_mitos2.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"Annotate mitochondrial genomes using MITOS2","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate_mitos2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"","code":"annotate_mitos2(   assembly = NULL,   topology = \"circular\",   genetic_code = \"2\",   ref_db = \"Chordata\",   ref_dir = \"/home/harpua/Jonah/MitoPilot/ref_dbs/Mitos2\",   mitos_opts = \"--best --intron 0 --oril 0\",   out = NULL,   condaenv = \"mitos\" )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate_mitos2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate mitochondrial genomes using MITOS2 — annotate_mitos2","text":"assembly DNAString object topology \"circular\" \"linear\" genetic_code NCBI genetic code number (default: 2) ref_db Mitos2 reference database (default: \"Chordata\") ref_dir Path Mitos2 reference database mitos_opts Additional command line options MITOS2 output directory condaenv Conda environment run MITOS2 (default: \"mitos\")","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate_trnaScan.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"Use tRNAscan-SE annotate tRNAs mitochondrial genome assembly","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate_trnaScan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"","code":"annotate_trnaScan(   assembly = NULL,   rotate = TRUE,   trnaScan_opts = \"-M vert\",   cpus = 4,   out = NULL,   condaenv = \"base\" )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/annotate_trnaScan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tRNAscan-SE to annotate tRNAs in a mitochondrial genome assembly — annotate_trnaScan","text":"assembly text string assembly annotate rotate assembly rotated? default = TRUE trnaScan_opts command line options tRNAscan-SE (defatult = `-M vert`) cpus number cpus use (default = 4) output file name condaenv conda environment use (default = \"base\")","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/backwards_compatibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Update old project database for backwards compatibility — backwards_compatibility","title":"Update old project database for backwards compatibility — backwards_compatibility","text":"Update old project database backwards compatibility. Adds \"reviewed\", \"ID_verified\", \"genetic_code\", \"problematic\" columns annotate table, \"start_gene\" column annotate_opts table. Adds \"assembler\", \"mitofinder_db\", \"mitofinder\" columns assemble_opts table. Adds \"max_blast_hits\" curate_opts table. Also adds \"asmbDir = 'NA'\" .config params block updates container current MitoPilot version .config file.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/backwards_compatibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update old project database for backwards compatibility — backwards_compatibility","text":"","code":"backwards_compatibility(path = \".\")"},{"path":"https://smithsonian.github.io/MitoPilot/reference/backwards_compatibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update old project database for backwards compatibility — backwards_compatibility","text":"path Path project directory (default = current working directory)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/compare_aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise comparison of AA sequences — compare_aa","title":"Pairwise comparison of AA sequences — compare_aa","text":"Pairwise comparison AA sequences","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/compare_aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise comparison of AA sequences — compare_aa","text":"","code":"compare_aa(query, target, type = c(\"pctId\", \"similarity\"), subMx = \"BLOSUM80\")"},{"path":"https://smithsonian.github.io/MitoPilot/reference/compare_aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise comparison of AA sequences — compare_aa","text":"query focal sequence target target sequence type type comparison perform. Options 'pctId' 'similarity' subMx substitution matrix use comparison. Default BLOSUM80","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Map reads to assembly — coverage","title":"Map reads to assembly — coverage","text":"Map reads assembly","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map reads to assembly — coverage","text":"","code":"coverage(   assembly_fn = \"22030FL-06-02-140_assembly_1.fasta\",   paired_reads_1 = \"extended_1_paired.fq\",   paired_reads_2 = \"extended_2_paired.fq\",   unpaired_reads = \"unpaired.fq\",   cpus = 4,   outDir = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map reads to assembly — coverage","text":"assembly_fn Path input assembly file (fasta) paired_reads_1 path raw forward input reads (fastq) paired_reads_2 path raw reverse input reads (fastq) unpaired_reads path raw unpaired input reads (fastq) cpus Number CPUs use outDir Path output directory","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/coverage_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Use coverage info to trim linear assemblies — coverage_trim","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"Use coverage info trim linear assemblies","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/coverage_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"","code":"coverage_trim(assembly, stats)"},{"path":"https://smithsonian.github.io/MitoPilot/reference/coverage_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use coverage info to trim linear assemblies — coverage_trim","text":"assembly DNAString object stats data frame coverage stats","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_diptera_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation curation for dipteran mitogenomes — curate_diptera_mito","title":"Annotation curation for dipteran mitogenomes — curate_diptera_mito","text":"Annotation curation dipteran mitogenomes","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_diptera_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation curation for dipteran mitogenomes — curate_diptera_mito","text":"","code":"curate_diptera_mito(   annotations_fn = NULL,   assembly_fn = NULL,   coverage_fn = NULL,   genetic_code = 5,   out_dir = NULL,   max_blast_hits = 100,   params = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_diptera_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation curation for dipteran mitogenomes — curate_diptera_mito","text":"annotations_fn Path annotations file (csv) assembly_fn Path assembly file (fasta) coverage_fn Path coverage file (csv) genetic_code Genetic code use (default = 2) out_dir Path output directory max_blast_hits Maximum number top BLAST hits retain (default = 100) params Nested list curation parameters. Can also provided base64 encoded json string.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation curation for fish mitogenomes — curate_fish_mito","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"Annotation curation fish mitogenomes","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"","code":"curate_fish_mito(   annotations_fn = NULL,   assembly_fn = NULL,   coverage_fn = NULL,   genetic_code = 2,   out_dir = NULL,   max_blast_hits = 100,   params = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation curation for fish mitogenomes — curate_fish_mito","text":"annotations_fn Path annotations file (csv) assembly_fn Path assembly file (fasta) coverage_fn Path coverage file (csv) genetic_code Genetic code use (default = 2) out_dir Path output directory max_blast_hits Maximum number top BLAST hits retain (default = 100) params Nested list curation parameters. Can also provided base64 encoded json string.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_mammal_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation curation for mammal mitogenomes — curate_mammal_mito","title":"Annotation curation for mammal mitogenomes — curate_mammal_mito","text":"Annotation curation mammal mitogenomes","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_mammal_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation curation for mammal mitogenomes — curate_mammal_mito","text":"","code":"curate_mammal_mito(   annotations_fn = NULL,   assembly_fn = NULL,   coverage_fn = NULL,   genetic_code = 2,   out_dir = NULL,   max_blast_hits = 100,   params = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_mammal_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation curation for mammal mitogenomes — curate_mammal_mito","text":"annotations_fn Path annotations file (csv) assembly_fn Path assembly file (fasta) coverage_fn Path coverage file (csv) genetic_code Genetic code use (default = 2) out_dir Path output directory max_blast_hits Maximum number top BLAST hits retain (default = 100) params Nested list curation parameters. Can also provided base64 encoded json string.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_starfish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation curation for starfish mitogenomes — curate_starfish_mito","title":"Annotation curation for starfish mitogenomes — curate_starfish_mito","text":"Annotation curation starfish mitogenomes","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_starfish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation curation for starfish mitogenomes — curate_starfish_mito","text":"","code":"curate_starfish_mito(   annotations_fn = NULL,   assembly_fn = NULL,   coverage_fn = NULL,   genetic_code = 9,   out_dir = NULL,   max_blast_hits = 100,   params = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/curate_starfish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotation curation for starfish mitogenomes — curate_starfish_mito","text":"annotations_fn Path annotations file (csv) assembly_fn Path assembly file (fasta) coverage_fn Path coverage file (csv) genetic_code Genetic code use (default = 2) out_dir Path output directory max_blast_hits Maximum number top BLAST hits retain (default = 100) params Nested list curation parameters. Can also provided base64 encoded json string.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/export_db_to_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Export project database to CSV — export_db_to_csv","title":"Export project database to CSV — export_db_to_csv","text":"Exports MitoPilot SQLite database CSV. File name include date time export.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/export_db_to_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export project database to CSV — export_db_to_csv","text":"","code":"export_db_to_csv(path = \".\")"},{"path":"https://smithsonian.github.io/MitoPilot/reference/export_db_to_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export project database to CSV — export_db_to_csv","text":"path Path project directory (default = current working directory)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/export_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate export NCBI files — export_files","title":"Generate export NCBI files — export_files","text":"Generate export NCBI files","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/export_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate export NCBI files — export_files","text":"","code":"export_files(   group = NULL,   IDs = NULL,   fasta_header =     paste(\"{ID} [organism={Taxon}] [topology={topology}] [mgcode={genetic_code}]\",     \"[location=mitochondrion] {Taxon} mitochondrion, complete genome\"),   fasta_header_gene = paste(\"{ID} [organism={Taxon}] [mgcode={genetic_code}]\",     \"[location=mitochondrion] {Taxon}\"),   out_dir = NULL,   generateAAalignments = T,   gene_export = F )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/export_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate export NCBI files — export_files","text":"group (optional) export group names IDs One sample IDs export. provided samples export group exported fasta_header Template mitogenome fasta headers. Uses glue syntax (.e. `...`) insert values samples table fasta_header_gene Template gene fasta headers. Uses glue syntax (.e. `...`) insert values samples table out_dir directory save exported files generateAAalignments Generate group-level amino acid alignments (default: TRUE) gene_export Export FASTAs feature tables individual genes? (default: FALSE)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_assembly.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assembly from database — get_assembly","title":"Get assembly from database — get_assembly","text":"Get assembly database","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_assembly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assembly from database — get_assembly","text":"","code":"get_assembly(ID, path, scaffold = NULL, con)"},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_assembly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assembly from database — get_assembly","text":"ID sample ID path assembly getOrganelle path scaffold scaffold name(s) get (NULL , default) con database connection","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_assembly_userAsmb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get assembly from database — get_assembly_userAsmb","title":"Get assembly from database — get_assembly_userAsmb","text":"Get assembly database","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_assembly_userAsmb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get assembly from database — get_assembly_userAsmb","text":"","code":"get_assembly_userAsmb(ID, path, scaffold = NULL, con)"},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_assembly_userAsmb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get assembly from database — get_assembly_userAsmb","text":"ID sample ID path assembly getOrganelle path scaffold scaffold name(s) get (NULL , default) con database connection","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_top_hits_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top BLASTP hits — get_top_hits_local","title":"Get top BLASTP hits — get_top_hits_local","text":"blastp available path loaded system(), set options(\"MitoPilot.blastp\" = \"/path//blastp/executable\")","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_top_hits_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top BLASTP hits — get_top_hits_local","text":"","code":"get_top_hits_local(ref_db = NULL, query = NULL, max_blast_hits = 100)"},{"path":"https://smithsonian.github.io/MitoPilot/reference/get_top_hits_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top BLASTP hits — get_top_hits_local","text":"ref_db reference database query query sequences max_blast_hits Maximum number top BLAST hits retain (default = 100)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/make_PCG_alignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate HTML report woth PCG alignments — make_PCG_alignments","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"Generate HTML report woth PCG alignments","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/make_PCG_alignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"","code":"make_PCG_alignments(export_group = NULL, db = NULL, out_path = NULL)"},{"path":"https://smithsonian.github.io/MitoPilot/reference/make_PCG_alignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate HTML report woth PCG alignments — make_PCG_alignments","text":"export_group Name submission group db path sqlite database out_path path output files","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a new project database — new_db","title":"Initialize a new project database — new_db","text":"Initialize new project database","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a new project database — new_db","text":"","code":"new_db(   db_path = \"./.sqlite\",   mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\",   genetic_code = 2,   assemble_cpus = 6,   assemble_memory = 24,   assembler = \"GetOrganelle\",   seeds_db =     \"https://raw.githubusercontent.com/smithsonian/MitoPilot/main/ref_dbs/getOrganelle/seeds/fish_mito_seeds.fasta\",   labels_db =     \"https://raw.githubusercontent.com/smithsonian/MitoPilot/main/ref_dbs/getOrganelle/labels/fish_mito_labels.fasta\",   getOrganelle = paste(\"-F 'anonym'\", \"-R 10 -k '21,45,65,85,105,115'\",     \"--larger-auto-ws\", \"--expected-max-size 20000\", \"--target-genome-size 16500\"),   mitofinder_db =     \"https://raw.githubusercontent.com/Smithsonian/MitoPilot/refs/heads/main/ref_dbs/MitoFinder/NC_002333_Danio_rerio.gb\",   mitofinder = paste(\"--megahit\"),   annotate_cpus = 6,   annotate_memory = 36,   annotate_ref_db = \"Chordata\",   annotate_ref_dir = \"/ref_dbs/Mitos2\",   mitos_opts = \"--intron 0 --oril 0\",   trnaScan_opts = \"-M vert\",   curate_cpus = 4,   curate_memory = 8,   curate_target = \"fish_mito\",   max_blast_hits = 100,   curate_params = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a new project database — new_db","text":"db_path Path new database file mapping_fn Path mapping CSV file. Must contain columns \"ID\", \"Taxon, \"R1\", \"R2\" mapping_id Column name mapping file use primary key mapping_taxon Column name mapping file containing Taxonomic identifier (eg, species name) genetic_code Translation table organisms. See NCBI website info https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi assemble_cpus Default # cpus assembly assemble_memory default memory (GB) assembly assembler Assembler, choice \"GetOrgnalle\" (default) \"MitoFinder\" seeds_db Path gotOrganelle seeds database, can URL, file name labels_db. Default fish database built RefSeq. https://raw.githubusercontent.com/smithsonian/MitoPilot/main/ref_dbs/getOrganelle/seeds/fish_mito_seeds.fasta labels_db Path gotOrganelle labels database, can URL, file name seeds_db. Default fish database built RefSeq. https://raw.githubusercontent.com/smithsonian/MitoPilot/main/ref_dbs/getOrganelle/seeds/fish_mito_labels.fasta getOrganelle Default getOrganelle command line options mitofinder_db Path MitoFinder reference db, must GenBank format (.gb), can URL. Default Danio rerio mitogenome (https://raw.githubusercontent.com/Smithsonian/MitoPilot/refs/heads/main/ref_dbs/MitoFinder/NC_002333_Danio_rerio.gb) mitofinder Default MitoFinder command line options annotate_cpus Default # cpus annotation annotate_memory Default memory (GB) annotation annotate_ref_db Default Mitos2 reference database annotate_ref_dir Default Mitos2 reference database directory mitos_opts Default MITOS2 command line options trnaScan_opts Default tRNAscan-SE command line options curate_cpus Default # cpus curation curate_memory Default memory (GB) curation curate_target Default target database curation max_blast_hits Maximum number top BLAST hits retain (default = 100) curate_params Default curation parameters","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_db_userAsmb.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a new project database — new_db_userAsmb","title":"Initialize a new project database — new_db_userAsmb","text":"Initialize new project database","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_db_userAsmb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a new project database — new_db_userAsmb","text":"","code":"new_db_userAsmb(   db_path = \"./.sqlite\",   mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\",   genetic_code = 2,   annotate_cpus = 6,   annotate_memory = 36,   annotate_ref_db = \"Chordata\",   annotate_ref_dir = \"/ref_dbs/Mitos2\",   mitos_opts = \"--intron 0 --oril 0\",   trnaScan_opts = \"-M vert\",   curate_cpus = 4,   curate_memory = 8,   curate_target = \"fish_mito\",   max_blast_hits = 100,   curate_params = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_db_userAsmb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a new project database — new_db_userAsmb","text":"db_path Path new database file mapping_fn Path mapping CSV file. Must contain columns \"ID\", \"Taxon, \"R1\", \"R2\" mapping_id Column name mapping file use primary key mapping_taxon Column name mapping file containing Taxonomic identifier (eg, species name) genetic_code Translation table organisms. See NCBI website info https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi annotate_cpus Default # cpus annotation annotate_memory Default memory (GB) annotation annotate_ref_db Default Mitos2 reference database annotate_ref_dir Default Mitos2 reference database directory mitos_opts Default MITOS2 command line options trnaScan_opts Default tRNAscan-SE command line options curate_cpus Default # cpus curation curate_memory Default memory (GB) curation curate_target Default target database curation max_blast_hits Maximum number top BLAST hits retain (default = 100) curate_params Default curation parameters","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize new MitoPilot Project — new_project","title":"Initialize new MitoPilot Project — new_project","text":"Initialize new MitoPilot Project","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize new MitoPilot Project — new_project","text":"","code":"new_project(   path = \".\",   mapping_fn = NULL,   mapping_id = \"ID\",   data_path = NULL,   min_depth = 2e+06,   genetic_code = 2,   executor = c(\"local\", \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\"),   container = paste0(\"macguigand/mitopilot:\", utils::packageVersion(\"MitoPilot\")),   custom_seeds_db = NULL,   custom_labels_db = NULL,   config = NULL,   Rproj = TRUE,   force = FALSE,   ... )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize new MitoPilot Project — new_project","text":"path Path project directory (default = current working directory) mapping_fn Path mapping file. csv minimally includes `ID` column unique identifier sample, `Taxon` column containing taxonomic information sample, columns `R1` `R2` specifying names raw paired read inputs. May include additional columns sample metadata. mapping_id name column mapping file contains unique sample identifiers (default = \"ID\"). data_path Path directory raw data located. Can AWS s3 bucket even using AWS pipeline execution.. min_depth Minimum sequencing depth pre-processing proceed assembly (default: 2000000) genetic_code Translation table organisms. See NCBI website info https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi executor executor use running nextflow pipeline. Must one \"local\" (default) \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\". container docker container use pipeline execution. custom_seeds_db Full path custom seeds database GetOrganelle custom_labels_db Full path custom labels database GetOrganelle config (optional) provide path existing custom nextflow config file. provided config file template created based specified executor. Rproj (logical) Initialize open RStudio project project directory (default = TRUE). option effect running interactively RStudio. force (logical) Force recreating existing project database config files (default = FALSE). ... Additional arguments passed default processing parameters `new_db()`","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_project_userAsmb.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize new MitoPilot Project with user-provided mitogenome assemblies — new_project_userAsmb","title":"Initialize new MitoPilot Project with user-provided mitogenome assemblies — new_project_userAsmb","text":"Initialize new MitoPilot Project user-provided mitogenome assemblies","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_project_userAsmb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize new MitoPilot Project with user-provided mitogenome assemblies — new_project_userAsmb","text":"","code":"new_project_userAsmb(   path = \".\",   mapping_fn = NULL,   mapping_id = \"ID\",   data_path = NULL,   assembly_path = \"NA\",   genetic_code = 2,   executor = c(\"local\", \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\"),   container = paste0(\"macguigand/mitopilot:\", utils::packageVersion(\"MitoPilot\")),   config = NULL,   Rproj = TRUE,   force = FALSE,   ... )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_project_userAsmb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize new MitoPilot Project with user-provided mitogenome assemblies — new_project_userAsmb","text":"path Path project directory (default = current working directory) mapping_fn Path mapping file. csv minimally includes `ID` column unique identifier sample, `Taxon` column containing taxonomic information sample, columns `R1` `R2` specifying names raw paired read inputs, `Assembly` column containing names mitogenome assembly fasta files (one contig/scaffold sequence per sample), `Topology` column containing information assembly topology (\"circular\" \"linear\") May include additional columns sample metadata. mapping_id name column mapping file contains unique sample identifiers (default = \"ID\"). data_path Path directory raw data located. Can AWS s3 bucket even using AWS pipeline execution. assembly_path Path directory mitogenome assemblies located. Can AWS s3 bucket even using AWS pipeline execution. genetic_code Translation table organisms. See NCBI website info https://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi executor executor use running nextflow pipeline. Must one \"local\" (default) \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\". container docker container use pipeline execution. config (optional) provide path existing custom nextflow config file. provided config file template created based specified executor. Rproj (logical) Initialize open RStudio project project directory (default = TRUE). option effect running interactively RStudio. force (logical) Force recreating existing project database config files (default = FALSE). ... Additional arguments passed default processing parameters `new_db()`","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_test_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a test project — new_test_project","title":"Initialize a test project — new_test_project","text":"function set test project fectch associated data ENA. `n` parameter can used limit number species used test project faster set .","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_test_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a test project — new_test_project","text":"","code":"new_test_project(   path = \".\",   n = Inf,   full_size = FALSE,   executor = \"local\",   container = paste0(\"macguigand/mitopilot:\", utils::packageVersion(\"MitoPilot\")),   Rproj = TRUE,   force = FALSE,   ... )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/new_test_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a test project — new_test_project","text":"path path directory test project (default = currect working directory). created already exists. n many samples include test project (Default = Inf, include ) full_size (logical) Use full size test data set (default = FALSE). Setting TRUE download raw data ENA, require 10GB take time complete. default set smaller pre-filtered input files fetched MitoPilot github repo. executor executor use running nextflow pipeline. Must one \"local\" (default) \"awsbatch\", \"NMNH_Hydra\", \"NOAA_SEDNA\". container container use running pipeline. Rproj (logical) Initialize open RStudio project project directory (default = TRUE). now effect running interactively RStudio. force (logical) Force recreating existing project database config files (default = FALSE). ... Additional arguments passed `init_db()`","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/nextflow_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Nextflow command to run pipline — nextflow_cmd","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"Generate Nextflow command run pipline","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/nextflow_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"","code":"nextflow_cmd(   workflow = c(\"assemble\", \"annotate\"),   path = NULL,   source = app_sys(\"nextflow\"),   userAsmbs = FALSE )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/nextflow_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Nextflow command to run pipline — nextflow_cmd","text":"workflow module update (default = c(\"assemble\", \"annotate\")) path MitoPilot project directory source Nextflow script source. default, `nextflow/` subdirectory package installation. userAsmbs User supplied assemblies, TRUE/FALSE? (default = FALSE)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_diptera_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Default curation and validation parameters for dipteran Mitochondria — params_diptera_mito","title":"Default curation and validation parameters for dipteran Mitochondria — params_diptera_mito","text":"Default curation validation parameters dipteran Mitochondria","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_diptera_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default curation and validation parameters for dipteran Mitochondria — params_diptera_mito","text":"","code":"params_diptera_mito(alt = list())"},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_diptera_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default curation and validation parameters for dipteran Mitochondria — params_diptera_mito","text":"alt (optional) named list default values modify","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"Default curation validation parameters Fish Mitochondria","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"","code":"params_fish_mito(alt = list())"},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default curation and validation parameters for Fish Mitochondria — params_fish_mito","text":"alt (optional) named list default values modify","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_mammal_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Default curation and validation parameters for mammal Mitochondria — params_mammal_mito","title":"Default curation and validation parameters for mammal Mitochondria — params_mammal_mito","text":"Default curation validation parameters mammal Mitochondria","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_mammal_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default curation and validation parameters for mammal Mitochondria — params_mammal_mito","text":"","code":"params_mammal_mito(alt = list())"},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_mammal_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default curation and validation parameters for mammal Mitochondria — params_mammal_mito","text":"alt (optional) named list default values modify","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_starfish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Default curation and validation parameters for Starfish Mitochondria — params_starfish_mito","title":"Default curation and validation parameters for Starfish Mitochondria — params_starfish_mito","text":"Default curation validation parameters Starfish Mitochondria","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_starfish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default curation and validation parameters for Starfish Mitochondria — params_starfish_mito","text":"","code":"params_starfish_mito(alt = list())"},{"path":"https://smithsonian.github.io/MitoPilot/reference/params_starfish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default curation and validation parameters for Starfish Mitochondria — params_starfish_mito","text":"alt (optional) named list default values modify","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/rotate_asmb.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate circular mitogenome to start at given gene — rotate_asmb","title":"Rotate circular mitogenome to start at given gene — rotate_asmb","text":"Rotate circular mitogenome start given gene","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/rotate_asmb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate circular mitogenome to start at given gene — rotate_asmb","text":"","code":"rotate_asmb(assembly = NULL, annotations = NULL, start_gene = \"trnF\")"},{"path":"https://smithsonian.github.io/MitoPilot/reference/rotate_asmb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate circular mitogenome to start at given gene — rotate_asmb","text":"assembly Biostring containing mitogenome assembly annotations tibble containing mitogenome annotation, produced `annotate.R` start_gene name gene (PCG, rRNA, tRNA) start circular assembly (default = \"trnF\")","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(shiny.launch.browser = T),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/update_sample_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update project database metadata. — update_sample_metadata","title":"Update project database metadata. — update_sample_metadata","text":"Update metadata existing project database. update ID, R1, R2, can add new metadata columns. Creates backup existing database prior updating.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/update_sample_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update project database metadata. — update_sample_metadata","text":"","code":"update_sample_metadata(   path = \".\",   update_mapping_fn = NULL,   mapping_id = \"ID\",   mapping_taxon = \"Taxon\" )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/update_sample_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update project database metadata. — update_sample_metadata","text":"path Path project directory (default = current working directory) update_mapping_fn Path update mapping CSV file. Must contain columns \"ID\" \"Taxon\" mapping_id Column name update mapping file use primary key mapping_taxon Column name update mapping file containing Taxonomic identifier (eg, species name)","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/update_sample_seqdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update sequence files for existing project — update_sample_seqdata","title":"Update sequence files for existing project — update_sample_seqdata","text":"Update sequence data files samples existing project database. updating, user rerun samples, starting ASSEMBLE module. Creates backup existing database prior updating.","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/update_sample_seqdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update sequence files for existing project — update_sample_seqdata","text":"","code":"update_sample_seqdata(path = \".\", update_mapping_fn = NULL, mapping_id = \"ID\")"},{"path":"https://smithsonian.github.io/MitoPilot/reference/update_sample_seqdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update sequence files for existing project — update_sample_seqdata","text":"path Path project directory (default = current working directory) update_mapping_fn Path update mapping CSV file. Must contain columns \"ID\", \"R1\", \"R2\" mapping_id Column name update mapping file use primary key","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_diptera_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — validate_diptera_mito","title":"Title — validate_diptera_mito","text":"Title","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_diptera_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — validate_diptera_mito","text":"","code":"validate_diptera_mito(   annotations_fn = NULL,   coverage_fn = NULL,   params = list(),   out_dir = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_diptera_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — validate_diptera_mito","text":"annotations_fn path annotations file (csv) coverage_fn path coverage file (csv) params nested list curation/validation parameters. Can also provided base64 encoded JSON string. out_dir output directory","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_fish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — validate_fish_mito","title":"Title — validate_fish_mito","text":"Title","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_fish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — validate_fish_mito","text":"","code":"validate_fish_mito(   annotations_fn = NULL,   coverage_fn = NULL,   params = list(),   out_dir = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_fish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — validate_fish_mito","text":"annotations_fn path annotations file (csv) coverage_fn path coverage file (csv) params nested list curation/validation parameters. Can also provided base64 encoded JSON string. out_dir output directory","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_mammal_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — validate_mammal_mito","title":"Title — validate_mammal_mito","text":"Title","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_mammal_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — validate_mammal_mito","text":"","code":"validate_mammal_mito(   annotations_fn = NULL,   coverage_fn = NULL,   params = list(),   out_dir = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_mammal_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — validate_mammal_mito","text":"annotations_fn path annotations file (csv) coverage_fn path coverage file (csv) params nested list curation/validation parameters. Can also provided base64 encoded JSON string. out_dir output directory","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_starfish_mito.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — validate_starfish_mito","title":"Title — validate_starfish_mito","text":"Title","code":""},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_starfish_mito.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — validate_starfish_mito","text":"","code":"validate_starfish_mito(   annotations_fn = NULL,   coverage_fn = NULL,   params = list(),   out_dir = NULL )"},{"path":"https://smithsonian.github.io/MitoPilot/reference/validate_starfish_mito.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — validate_starfish_mito","text":"annotations_fn path annotations file (csv) coverage_fn path coverage file (csv) params nested list curation/validation parameters. Can also provided base64 encoded JSON string. out_dir output directory","code":""}]
